{"version":3,"sources":["Shared/Icons/email.svg","Shared/Icons/github.svg","Shared/Icons/map.svg","Shared/Icons/reddit.svg","Shared/Icons/twitch.svg","Shared/Icons/youtube.svg","Widgets/Search/Resources/GoogleIcon.svg","Widgets/Search/Resources/RedditIcon.svg","Widgets/Search/Resources/YoutubeIcon.svg","Shared/Icons/light-on.svg","Shared/Icons/light-off.svg","Widgets/Weather/Resources/brokenClouds.svg","Widgets/Weather/Resources/clearSky.svg","Widgets/Weather/Resources/fewClouds.svg","Widgets/Weather/Resources/fog.svg","Widgets/Weather/Resources/heavyRain.svg","Widgets/Weather/Resources/rain.svg","Widgets/Weather/Resources/scatteredClouds.svg","Widgets/Weather/Resources/snow.svg","Widgets/Weather/Resources/thunderStorm.svg","Shared/Theme/ThemeContext.js","Widgets/DateBar.js","Widgets/IconBar.js","Shared/Api/Api.js","UsePrevious.js","Widgets/CurrencyConversion.js","Widgets/Reddit/RedditView.js","Widgets/Reddit/RedditController.js","Widgets/Links.js","Widgets/Panels.js","Widgets/Search/SearchBar.js","Widgets/Weather/WeatherView.js","Widgets/Weather/WeatherController.js","Shared/Theme/ThemeButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","themes","light","boxBackground","staticText","dynamicText","background","border","dark","ThemeContext","React","createContext","DateBlock","_ref","timeZone","time","date","react_default","a","createElement","Fragment","Consumer","theme","className","style","color","DateBar","_useState","useState","Date","_useState2","Object","slicedToArray","dateTime","setDateTime","intervalRef","useRef","useEffect","current","setInterval","clearInterval","localDate","toLocaleString","weekday","year","month","day","localTime","toLocaleTimeString","nzTime","moment","toString","tz","format","nzDate","Icon","props","href","url","src","logo","alt","IconBar","EmailLogo","GitHubLogo","GoogleMaps","RedditLogo","TwitchLogo","YoutubeLogo","_callee","from","to","regenerator_default","wrap","_context","prev","next","abrupt","axios","get","concat","process","stop","this","usePrevious","value","ref","availableCurrencies","CurrencyConversion","fromCurrency","setFromCurrency","_useState3","_useState4","toCurrency","setToCurrency","_useState5","_useState6","fromAmount","setFromAmount","_useState7","_useState8","toAmount","setToAmount","_useState9","_useState10","fromTo","setFromTo","previousFrom","previousTo","getExchangeRate","isSettingTo","arguments","length","undefined","_x","_x2","_getCurrencyConversion","apply","Api","then","response","data","val","parseFloat","toFixed","onToChanged","e","target","onFromChanged","onFromCurrencyChanged","newIndex","indexOf","onToCurrencyChanged","type","placeholder","onInput","borderColor","defineProperty","marginRight","onClick","RedditView","content","redditContent","isLoggedIn","map","item","name","link","colour","backgroundColor","isLoading","pickRandom","onSubmit","errorMessage","webColour","allowedSubreddits","Map","set","RedditController","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSavedItems","asyncToGenerator","mark","username","password","r","hasError","me","saved","savedCategories","items","snoowrap","userAgent","clientId","clientSecret","getMe","catch","sent","setState","getSavedContent","forEach","element","categoryColour","subreddit_name_prefixed","push","title","permalink","fetchMore","skipReplies","amount","preventDefault","state","bind","assertThisInitialized","randomItemIndex","Math","floor","random","slice","randomSavedItems","Reddit_RedditView","error","context","Component","contextType","Link","isEnteringLink","setIsLinking","links","setLinks","currentLink","setCurrentLink","currentName","setCurrentName","JSON","parse","window","localStorage","getItem","console","log","linksDisplay","index","readOnlyError","splice","setItem","stringify","localStorageLinks","removeLink","addLinkContent","newLinks","onChange","display","flexDirection","Panels","Reddit_RedditController","Widgets_CurrencyConversion","Links","SearchBar","currentProviderIndex","setProviderIndex","providers","action","icon","GoogleIcon","YoutubeIcon","RedditIcon","LightOn","LightOff","method","maxNoOfProviders","currentIndex","handleClick","autoComplete","onKeyDown","event","keyCode","handleProviderChange","onThemeChanged","formatTemperature","temp","round","WeatherView","currentWeather","weatherId","ThunderStorm","Rain","HeavyRain","Snow","Fog","ClearSky","FewClouds","ScatteredClouds","BrokenClouds","fontSize","tempMin","tempMax","sunriseTime","sunsetTime","WeatherController","getMyLocation","_this2","location","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","weather","id","main","temp_max","temp_min","wind","speed","sys","sunrise","sunset","_this3","Weather_WeatherView","ThemedButton","assign","App","setTheme","Provider","Weather_WeatherController","Widgets_DateBar","Widgets_IconBar","Search_SearchBar","Widgets_Panels","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c25c3d23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.4082623a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.5b316389.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.45bc9386.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitch.3974a3ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.198b0452.svg\";","module.exports = __webpack_public_path__ + \"static/media/GoogleIcon.b5908130.svg\";","module.exports = __webpack_public_path__ + \"static/media/RedditIcon.a0b0f5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/YoutubeIcon.a7c57edd.svg\";","module.exports = __webpack_public_path__ + \"static/media/light-on.52013f07.svg\";","module.exports = __webpack_public_path__ + \"static/media/light-off.957f717d.svg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.f857faf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.922f1f6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.b0cf30aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.ca88433d.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavyRain.531d27ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9a09d698.svg\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.844c1a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b2c0182b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderStorm.0fff53ee.svg\";","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        boxBackground: \"#d0d0d0\",\r\n        staticText: \"black\",\r\n        dynamicText: \"black\",\r\n        background: \"#b9b9b9\",\r\n        border: \"black\"\r\n    },\r\n    dark: {\r\n        boxBackground: \"#49505f\",\r\n        staticText: \"#818b9e\",\r\n        dynamicText: \"white\",\r\n        background: \"#383e4b\",\r\n        border: \"#6b7586\"\r\n    }\r\n};\r\n\r\nexport const ThemeContext = React.createContext(themes.dark);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport moment from \"moment-timezone\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nfunction DateBar() {\r\n    const [dateTime, setDateTime] = useState(new Date());\r\n    const intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        intervalRef.current = setInterval(() => setDateTime(new Date()), 1000);\r\n\r\n        return function cleanup() {\r\n            clearInterval(intervalRef.current);\r\n        };\r\n    });\r\n\r\n    var localDate = dateTime.toLocaleString(\"th-TH\", {\r\n        weekday: \"short\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n    });\r\n    var localTime = dateTime.toLocaleTimeString(\"it-IT\");\r\n    var nzTime = moment(dateTime.toString())\r\n        .tz(\"NZ\")\r\n        .format(\"HH:mm:ss\");\r\n    var nzDate = moment(dateTime.toString())\r\n        .tz(\"NZ\")\r\n        .format(\"ddd, D MMMM YYYY\");\r\n\r\n    return (\r\n        <div className=\"date-block\">\r\n            <DateBlock\r\n                timeZone=\"Bangkok, Thailand\"\r\n                time={localTime}\r\n                date={localDate}\r\n            />\r\n            <DateBlock\r\n                timeZone=\"Christchurch, New Zealand\"\r\n                time={nzTime}\r\n                date={nzDate}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DateBlock({ timeZone, time, date }) {\r\n    return (\r\n        <React.Fragment>\r\n            <ThemeContext.Consumer>\r\n                {theme => (\r\n                    <div className=\"date\" style={{ color: theme.staticText }}>\r\n                        <div className=\"date-time\">{time}</div>\r\n                        <div className=\"date-formatted\">{date}</div>\r\n                        <div className=\"date-formatted\">{timeZone}</div>\r\n                    </div>\r\n                )}\r\n            </ThemeContext.Consumer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DateBar;\r\n","import React from \"react\";\r\n\r\nimport EmailLogo from \"../Shared/Icons/email.svg\";\r\nimport GitHubLogo from \"../Shared/Icons/github.svg\";\r\nimport GoogleMaps from \"../Shared/Icons/map.svg\";\r\nimport RedditLogo from \"../Shared/Icons/reddit.svg\";\r\nimport TwitchLogo from \"../Shared/Icons/twitch.svg\";\r\nimport YoutubeLogo from \"../Shared/Icons/youtube.svg\";\r\n\r\nfunction IconBar() {\r\n    return (\r\n        <div className=\"icon-bar\">\r\n            <Icon url=\"https://outlook.live.com/mail/inbox\" logo={EmailLogo} />\r\n            <Icon url=\"https://github.com/cameronrw-nz\" logo={GitHubLogo} />\r\n            <Icon url=\"http://maps.google.com\" logo={GoogleMaps} />\r\n            <Icon url=\"https://reddit.com\" logo={RedditLogo} />\r\n            <Icon url=\"https://www.twitch.tv/directory\" logo={TwitchLogo} />\r\n            <Icon url=\"https://youtube.com\" logo={YoutubeLogo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Icon(props) {\r\n    return (\r\n        <a href={props.url}>\r\n            <img src={props.logo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default IconBar;\r\n","import axios from \"axios\";\r\n\r\nexport async function getCurrencyConversion(from, to) {\r\n    return axios.get(\r\n        `https://free.currencyconverterapi.com/api/v6/convert?q=${from}_${to}&compact=y&apiKey=${\r\n            process.env.REACT_APP_CURRENCY_APIKEY\r\n        }`\r\n    );\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as Api from \"../Shared/Api/Api\";\r\nimport usePrevious from \"../UsePrevious\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nconst availableCurrencies = [\"NZD\", \"THB\", \"USD\"];\r\n\r\nfunction CurrencyConversion() {\r\n    const [fromCurrency, setFromCurrency] = useState(\"NZD\");\r\n    const [toCurrency, setToCurrency] = useState(\"THB\");\r\n    const [fromAmount, setFromAmount] = useState(1);\r\n    const [toAmount, setToAmount] = useState(1);\r\n    const [fromTo, setFromTo] = useState(1);\r\n\r\n    const previousFrom = usePrevious(fromCurrency);\r\n    const previousTo = usePrevious(toCurrency);\r\n\r\n    useEffect(() => {\r\n        if (previousFrom !== fromCurrency) {\r\n            getExchangeRate();\r\n        } else if (previousTo !== toCurrency) {\r\n            getExchangeRate(false);\r\n        }\r\n    }, [fromCurrency, toCurrency]);\r\n\r\n    function getExchangeRate(isSettingTo = true) {\r\n        Api.getCurrencyConversion(fromCurrency, toCurrency).then(response => {\r\n            if (\r\n                !response ||\r\n                !response.data ||\r\n                !response.data[`${fromCurrency}_${toCurrency}`]\r\n            ) {\r\n                return;\r\n            }\r\n            setFromTo(response.data[`${fromCurrency}_${toCurrency}`].val);\r\n            if (isSettingTo) {\r\n                setToAmount(\r\n                    (\r\n                        parseFloat(fromAmount) *\r\n                        response.data[`${fromCurrency}_${toCurrency}`].val\r\n                    ).toFixed(2)\r\n                );\r\n            } else {\r\n                setFromAmount(\r\n                    (\r\n                        parseFloat(toAmount) /\r\n                        response.data[`${fromCurrency}_${toCurrency}`].val\r\n                    ).toFixed(2)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    function onToChanged(e) {\r\n        setToAmount(e.target.value);\r\n        setFromAmount((parseFloat(e.target.value) * fromTo).toFixed(2));\r\n    }\r\n\r\n    function onFromChanged(e) {\r\n        setToAmount((parseFloat(e.target.value) / fromTo).toFixed(2));\r\n        setFromAmount(e.target.value);\r\n    }\r\n\r\n    function onFromCurrencyChanged() {\r\n        var currencyIndex = availableCurrencies.indexOf(fromCurrency);\r\n        var newIndex = (currencyIndex + 1) % availableCurrencies.length;\r\n        setFromCurrency(availableCurrencies[newIndex]);\r\n    }\r\n\r\n    function onToCurrencyChanged() {\r\n        var currencyIndex = availableCurrencies.indexOf(toCurrency);\r\n        var newIndex = (currencyIndex + 1) % availableCurrencies.length;\r\n        setToCurrency(availableCurrencies[newIndex]);\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <div className=\"sidepanel-content\">\r\n                    <h2 style={{ color: theme.staticText }}>\r\n                        Currency Converter\r\n                    </h2>\r\n                    <div\r\n                        className=\"sidepanel-link-input\"\r\n                        style={{ color: theme.dynamicText }}\r\n                    >\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"THB\"\r\n                            value={fromAmount}\r\n                            onInput={onFromChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <div\r\n                            className=\"currency\"\r\n                            style={{ marginRight: \"4px\" }}\r\n                            onClick={onFromCurrencyChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            {fromCurrency}\r\n                        </div>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"NZD\"\r\n                            value={toAmount}\r\n                            onInput={onToChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <div\r\n                            className=\"currency\"\r\n                            onClick={onToCurrencyChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            {toCurrency}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default CurrencyConversion;\r\n","import React from \"react\";\r\n\r\nfunction RedditView(props) {\r\n    let content;\r\n    let redditContent;\r\n\r\n    if (props.isLoggedIn) {\r\n        if (props.content) {\r\n            redditContent = props.content.map(item => {\r\n                return GetRedditItem(\r\n                    item.name,\r\n                    item.link,\r\n                    item.colour,\r\n                    props.theme\r\n                );\r\n            });\r\n        }\r\n\r\n        content = props.isLoading ? (\r\n            <div style={{ color: props.theme.staticText }}>Loading...</div>\r\n        ) : (\r\n            <div className=\"action-button\" onClick={props.pickRandom}>\r\n                <div\r\n                    className=\"action-button-content\"\r\n                    style={{\r\n                        color: props.theme.staticText,\r\n                        borderColor: props.theme.borderColor\r\n                    }}\r\n                >\r\n                    Refresh\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <form onSubmit={props.onSubmit}>\r\n                <div className=\"sidepanel-link-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    />\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"sidepanel-content-button\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    >\r\n                        +\r\n                    </button>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                >\r\n                    {props.errorMessage}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2 style={{ color: props.theme.staticText }}>Reddit Saved</h2>\r\n            {redditContent}\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GetRedditItem(name, link, colour, theme) {\r\n    return (\r\n        <a href={`https://reddit.com/${link}`}>\r\n            <div\r\n                className=\"section-item\"\r\n                style={{ backgroundColor: colour, borderColor: theme.border }}\r\n            >\r\n                {name}\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default RedditView;\r\n","import React from \"react\";\r\nimport snoowrap from \"snoowrap\";\r\n\r\nimport RedditView from \"./RedditView\";\r\nimport { ThemeContext } from \"../../Shared/Theme/ThemeContext\";\r\n\r\nconst webColour = \"rgb(64.4%, 29.1%, 29.1%)\";\r\nconst dotnetColour = \"rgb(34.6%, 39.5%, 64.8%)\";\r\nconst generalColour = \"rgb(30.6%, 60.9%, 35.9%)\";\r\nconst allowedSubreddits = new Map();\r\nallowedSubreddits.set(\"r/reactjs\", webColour);\r\nallowedSubreddits.set(\"r/programming\", generalColour);\r\nallowedSubreddits.set(\"r/webdev\", webColour);\r\nallowedSubreddits.set(\"r/learnprogramming\", generalColour);\r\nallowedSubreddits.set(\"r/csharp\", dotnetColour);\r\nallowedSubreddits.set(\"r/web_design\", webColour);\r\nallowedSubreddits.set(\"r/javascript\", webColour);\r\n\r\nclass RedditController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            savedCategories: undefined\r\n        };\r\n\r\n        this.pickRandom = this.pickRandom.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (\r\n            process.env.REACT_APP_REDDIT_USERNAME === \"\" ||\r\n            process.env.REACT_APP_REDDIT_PASSWORD === \"\"\r\n        ) {\r\n            return;\r\n        } else {\r\n            await this.getSavedItems(\r\n                process.env.REACT_APP_REDDIT_USERNAME,\r\n                process.env.REACT_APP_REDDIT_PASSWORD\r\n            );\r\n        }\r\n    }\r\n\r\n    getSavedItems = async (username, password) => {\r\n        // Replace with actual connection to reddit.\r\n        const r = new snoowrap({\r\n            userAgent: \"Saved Info/0.1 by Darzolak\",\r\n            clientId: process.env.REACT_APP_REDDIT_CLIENTID,\r\n            clientSecret: process.env.REACT_APP_REDDIT_CLIENTSECRET,\r\n            username: username,\r\n            password: password\r\n        });\r\n\r\n        var hasError = false;\r\n        var me = await r.getMe().catch(e => (hasError = true));\r\n\r\n        if (hasError) {\r\n            this.setState({\r\n                isLoggedIn: false,\r\n                errorMessage: \"Username or Password was incorrect.\"\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({ isLoggedIn: true });\r\n        }\r\n        var saved = await me.getSavedContent();\r\n\r\n        var savedCategories = new Map();\r\n        var items = [];\r\n        saved.forEach(element => {\r\n            const categoryColour = allowedSubreddits.get(\r\n                element.subreddit_name_prefixed\r\n            );\r\n            if (categoryColour) {\r\n                items.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n                if (!savedCategories.get(element.subreddit_name_prefixed)) {\r\n                    savedCategories.set(element.subreddit_name_prefixed, [\r\n                        { name: element.title, permalink: element.permalink }\r\n                    ]);\r\n                } else {\r\n                    savedCategories.get(element.subreddit_name_prefixed).push({\r\n                        name: element.title,\r\n                        permalink: element.permalink\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({ items });\r\n        this.pickRandom();\r\n\r\n        // Fetch More\r\n        saved = await saved.fetchMore({\r\n            skipReplies: true,\r\n            amount: 100\r\n        });\r\n\r\n        savedCategories = new Map();\r\n        items = [];\r\n        saved.forEach(element => {\r\n            const categoryColour = allowedSubreddits.get(\r\n                element.subreddit_name_prefixed\r\n            );\r\n            if (categoryColour) {\r\n                items.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n                if (!savedCategories.get(element.subreddit_name_prefixed)) {\r\n                    savedCategories.set(element.subreddit_name_prefixed, [\r\n                        { name: element.title, permalink: element.permalink }\r\n                    ]);\r\n                } else {\r\n                    savedCategories.get(element.subreddit_name_prefixed).push({\r\n                        name: element.title,\r\n                        permalink: element.permalink\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        this.setState({ items });\r\n        return true;\r\n    };\r\n\r\n    pickRandom() {\r\n        if (!this.state.items) {\r\n            return;\r\n        }\r\n\r\n        const randomItemIndex = Math.floor(\r\n            Math.random() * (this.state.items.length - 7)\r\n        );\r\n        var items = this.state.items.slice(\r\n            randomItemIndex,\r\n            randomItemIndex + 7\r\n        );\r\n        this.setState({ randomSavedItems: items });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const username = e.target[0].value;\r\n        const password = e.target[1].value;\r\n\r\n        if (username && password) {\r\n            this.getSavedItems(username, password);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RedditView\r\n                content={this.state.randomSavedItems}\r\n                error={this.state.error}\r\n                isLoading={this.state.items === undefined}\r\n                pickRandom={this.pickRandom}\r\n                isLoggedIn={this.state.isLoggedIn}\r\n                onSubmit={this.onSubmit}\r\n                theme={this.context}\r\n                errorMessage={this.state.errorMessage}\r\n            />\r\n        );\r\n    }\r\n}\r\nRedditController.contextType = ThemeContext;\r\n\r\nexport default RedditController;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Link(props) {\r\n    const [isEnteringLink, setIsLinking] = useState(false);\r\n    const [links, setLinks] = useState([]);\r\n    const [currentLink, setCurrentLink] = useState(\"\");\r\n    const [currentName, setCurrentName] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setLinks(JSON.parse(window.localStorage.getItem(\"links\")));\r\n        console.log(\"loading\");\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        let newLinks = links;\r\n        if (!newLinks) {\r\n            newLinks = [];\r\n        }\r\n\r\n        newLinks.push({\r\n            link: currentLink,\r\n            name: currentName\r\n        });\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(newLinks));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n        setCurrentLink(\"\");\r\n        setCurrentName(\"\");\r\n        setIsLinking(false);\r\n    };\r\n\r\n    const removeLink = (e, index) => {\r\n        e.preventDefault();\r\n        if (!links) {\r\n            links = [];\r\n        }\r\n\r\n        links.splice(index, 1);\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(links));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n    };\r\n\r\n    const linksDisplay = links\r\n        ? links.map((element, index) => {\r\n              return (\r\n                  <a href={element.link}>\r\n                      <div\r\n                          className=\"section-item\"\r\n                          style={{\r\n                              color: props.theme.staticText,\r\n                              borderColor: props.theme.border,\r\n                              backgroundColor: props.theme.boxBackground\r\n                          }}\r\n                      >\r\n                          <div className=\"section-item-content\">\r\n                              {element.name}\r\n                          </div>\r\n                          <div\r\n                              className=\"section-item-action\"\r\n                              onClick={e => removeLink(e, index)}\r\n                          >\r\n                              -\r\n                          </div>\r\n                      </div>\r\n                  </a>\r\n              );\r\n          })\r\n        : undefined;\r\n\r\n    const addLinkContent = isEnteringLink ? (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"sidepanel-link-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => setCurrentName(e.target.value)}\r\n                    style={{ marginRight: \"4px\" }}\r\n                    placeholder=\"Name\"\r\n                    value={currentName}\r\n                    style={{\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => setCurrentLink(e.target.value)}\r\n                    style={{ marginRight: \"4px\" }}\r\n                    placeholder=\"Link\"\r\n                    value={currentLink}\r\n                    style={{\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"sidepanel-content-button\"\r\n                    style={{\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                >\r\n                    +\r\n                </button>\r\n            </div>\r\n        </form>\r\n    ) : (\r\n        <div className=\"action-button\" onClick={() => setIsLinking(true)}>\r\n            <div\r\n                className=\"action-button-content\"\r\n                style={{\r\n                    borderColor: props.theme.border,\r\n                    color: props.theme.staticText\r\n                }}\r\n            >\r\n                Add\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2 style={{ color: props.theme.staticText }}>Links</h2>\r\n            {linksDisplay}\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }} />\r\n            {addLinkContent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Link;\r\n","import React from \"react\";\r\nimport CurrencyConversion from \"./CurrencyConversion\";\r\nimport RedditController from \"./Reddit/RedditController\";\r\nimport Link from \"./Links\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nfunction Panels() {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <div className=\"panels\">\r\n                    <RedditController />\r\n                    <CurrencyConversion />\r\n                    <Link theme={theme} />\r\n                </div>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default Panels;\r\n","import React, { useState } from \"react\";\r\n\r\nimport GoogleIcon from \"./Resources/GoogleIcon.svg\";\r\nimport RedditIcon from \"./Resources/RedditIcon.svg\";\r\nimport YoutubeIcon from \"./Resources/YoutubeIcon.svg\";\r\nimport { ThemeContext, themes } from \"../../Shared/Theme/ThemeContext\";\r\nimport LightOn from \"../../Shared/Icons/light-on.svg\";\r\nimport LightOff from \"../../Shared/Icons/light-off.svg\";\r\n\r\nfunction SearchBar(props) {\r\n    const [currentProviderIndex, setProviderIndex] = useState(0);\r\n\r\n    function handleProviderChange(event, maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        if (event.keyCode === 38) {\r\n            currentIndex--;\r\n        } else if (event.keyCode === 40) {\r\n            currentIndex++;\r\n        }\r\n\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    function handleClick(maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        currentIndex++;\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    var providers = [\r\n        {\r\n            action: \"https://www.google.com/search\",\r\n            placeholder: \"Search Google\",\r\n            icon: GoogleIcon\r\n        },\r\n        {\r\n            action: \"https://www.youtube.com/results?search_query\",\r\n            placeholder: \"Search Youtube\",\r\n            icon: YoutubeIcon\r\n        },\r\n        {\r\n            action: \"https://www.reddit.com/search\",\r\n            placeholder: \"Search Reddit\",\r\n            icon: RedditIcon\r\n        }\r\n    ];\r\n\r\n    const icon = props.theme === themes.dark ? LightOn : LightOff;\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <form\r\n                    action={providers[currentProviderIndex].action}\r\n                    method=\"get\"\r\n                    name=\"searchform\"\r\n                >\r\n                    <div\r\n                        className=\"search-bar\"\r\n                        style={{\r\n                            color: theme.dynamicText\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"search-bar-icon\"\r\n                            onClick={() => handleClick(providers.length)}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                backgroundColor: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={providers[currentProviderIndex].icon}\r\n                                alt=\"Switch Search Provider\"\r\n                            />\r\n                        </div>\r\n                        <input\r\n                            className=\"search-bar-search\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            name=\"q\"\r\n                            onKeyDown={event =>\r\n                                handleProviderChange(event, providers.length)\r\n                            }\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                backgroundColor: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <img\r\n                            src={icon}\r\n                            className=\"light-icon\"\r\n                            onClick={props.onThemeChanged}\r\n                            alt=\"logo\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nimport BrokenClouds from \"./Resources/brokenClouds.svg\";\r\nimport ClearSky from \"./Resources/clearSky.svg\";\r\nimport FewClouds from \"./Resources/fewClouds.svg\";\r\nimport Fog from \"./Resources/fog.svg\";\r\nimport HeavyRain from \"./Resources/heavyRain.svg\";\r\nimport Rain from \"./Resources/rain.svg\";\r\nimport ScatteredClouds from \"./Resources/scatteredClouds.svg\";\r\nimport Snow from \"./Resources/snow.svg\";\r\nimport ThunderStorm from \"./Resources/thunderStorm.svg\";\r\nimport { isContext } from \"vm\";\r\n\r\nfunction WeatherView(props) {\r\n    let icon = null;\r\n    if (props.currentWeather.weatherId !== null) {\r\n        switch (props.currentWeather.weatherId.toString()[0]) {\r\n            case \"2\":\r\n                icon = ThunderStorm;\r\n                break;\r\n            case \"3\":\r\n                icon = Rain;\r\n                break;\r\n            case \"5\":\r\n                icon = HeavyRain;\r\n                break;\r\n            case \"6\":\r\n                icon = Snow;\r\n                break;\r\n            case \"7\":\r\n                icon = Fog;\r\n                break;\r\n            case \"8\":\r\n                switch (props.currentWeather.weatherId) {\r\n                    case 800:\r\n                        icon = ClearSky;\r\n                        break;\r\n                    case 801:\r\n                        icon = FewClouds;\r\n                        break;\r\n                    case 802:\r\n                        icon = ScatteredClouds;\r\n                        break;\r\n                    case 803:\r\n                    case 804:\r\n                        icon = BrokenClouds;\r\n                        break;\r\n                    default:\r\n                        icon = null;\r\n                }\r\n                break;\r\n            default:\r\n                icon = null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\" style={{ color: props.context.staticText }}>\r\n            <div className=\"weather-current-primary\">\r\n                <div className=\"flex-item\">\r\n                    {formatTemperature(props.currentWeather.temp)}\r\n                    <img\r\n                        src={icon}\r\n                        className=\"weather-primary-icon\"\r\n                        alt=\"logo\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"weather-current-secondary\">\r\n                <div className=\"flex\" style={{ fontSize: \"16px\" }}>\r\n                    {formatTemperature(props.currentWeather.tempMin) +\r\n                        \" - \" +\r\n                        formatTemperature(props.currentWeather.tempMax)}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunrise: \" +\r\n                        new Date(\r\n                            props.currentWeather.sunriseTime * 1000\r\n                        ).toLocaleTimeString(\"it-IT\")}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunset: \" +\r\n                        new Date(\r\n                            props.currentWeather.sunsetTime * 1000\r\n                        ).toLocaleTimeString(\"it-IT\")}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction formatTemperature(temp) {\r\n    return Math.round(temp * 10) / 10 + \"\\xB0C\";\r\n}\r\n\r\nexport default WeatherView;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport WeatherView from \"./WeatherView\";\r\nimport { ThemeContext } from \"../../Shared/Theme/ThemeContext\";\r\n\r\nclass WeatherController extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentWeather: null\r\n        };\r\n\r\n        this.getMyLocation = this.getMyLocation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMyLocation();\r\n    }\r\n\r\n    getMyLocation() {\r\n        const location = window.navigator && window.navigator.geolocation;\r\n\r\n        if (location) {\r\n            location.getCurrentPosition(\r\n                position => {\r\n                    this.getWeatherData(\r\n                        position.coords.latitude,\r\n                        position.coords.longitude\r\n                    );\r\n                },\r\n                error => {}\r\n            );\r\n        }\r\n    }\r\n\r\n    // Bad practice to show API key but since it's a free acc it doesn't matter\r\n    async getWeatherData(latitude, longitude) {\r\n        axios\r\n            .get(\r\n                \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n                    latitude +\r\n                    \"&lon=\" +\r\n                    longitude +\r\n                    \"&units=metric&dt=UTC&APPID=\" +\r\n                    process.env.REACT_APP_WEATHER_APIKEY\r\n            )\r\n            .then(response => {\r\n                var currentWeather = {\r\n                    weatherId: response.data.weather[0].id,\r\n                    temp: response.data.main.temp,\r\n                    tempMax: response.data.main.temp_max,\r\n                    tempMin: response.data.main.temp_min,\r\n                    wind: response.data.wind.speed,\r\n                    sunriseTime: response.data.sys.sunrise,\r\n                    sunsetTime: response.data.sys.sunset\r\n                };\r\n                this.setState({\r\n                    currentWeather: currentWeather\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const theme = this.context;\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.currentWeather === null ? (\r\n                    <div />\r\n                ) : (\r\n                    <WeatherView\r\n                        context={theme}\r\n                        currentWeather={this.state.currentWeather}\r\n                    />\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nWeatherController.contextType = ThemeContext;\r\n\r\nexport default WeatherController;\r\n","import React from \"react\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\n\r\nclass ThemedButton extends React.Component {\r\n    render() {\r\n        let props = this.props;\r\n        let theme = this.context;\r\n        return (\r\n            <button {...props} style={{ backgroundColor: theme.background }} />\r\n        );\r\n    }\r\n}\r\nThemedButton.contextType = ThemeContext;\r\n\r\nexport default ThemedButton;\r\n","import React, { useState } from \"react\";\r\n\r\nimport DateBar from \"./Widgets/DateBar\";\r\nimport IconBar from \"./Widgets/IconBar\";\r\nimport Panels from \"./Widgets/Panels\";\r\nimport SearchBar from \"./Widgets/Search/SearchBar\";\r\nimport Weather from \"./Widgets/Weather/WeatherController\";\r\nimport { ThemeContext, themes } from \"./Shared/Theme/ThemeContext\";\r\nimport ThemeButton from \"./Shared/Theme/ThemeButton\";\r\n\r\nimport \"./Styles/App.css\";\r\n\r\nfunction App() {\r\n    const [theme, setTheme] = useState(themes.light);\r\n\r\n    const toggleTheme = () => {\r\n        setTheme(theme === themes.dark ? themes.light : themes.dark);\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={theme}>\r\n            <div className=\"app\" style={{ backgroundColor: theme.background }}>\r\n                <div className=\"app-header\">\r\n                    <Weather />\r\n                    <DateBar />\r\n                </div>\r\n                <header className=\"app-content\">\r\n                    <IconBar />\r\n                    <SearchBar theme={theme} onThemeChanged={toggleTheme} />\r\n                    <Panels />\r\n                </header>\r\n            </div>\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./Styles/index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}