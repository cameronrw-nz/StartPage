{"version":3,"sources":["Shared/Icons/email.svg","Shared/Icons/github.svg","Shared/Icons/map.svg","Shared/Icons/reddit.svg","Shared/Icons/twitch.svg","Shared/Icons/youtube.svg","Widgets/Search/Resources/GoogleIcon.svg","Widgets/Search/Resources/RedditIcon.svg","Widgets/Search/Resources/YoutubeIcon.svg","Shared/Icons/light-on.svg","Shared/Icons/light-off.svg","Widgets/Weather/Resources/brokenClouds.svg","Widgets/Weather/Resources/clearSky.svg","Widgets/Weather/Resources/fewClouds.svg","Widgets/Weather/Resources/fog.svg","Widgets/Weather/Resources/heavyRain.svg","Widgets/Weather/Resources/rain.svg","Widgets/Weather/Resources/scatteredClouds.svg","Widgets/Weather/Resources/snow.svg","Widgets/Weather/Resources/thunderStorm.svg","Shared/Theme/ThemeContext.js","Widgets/DateBar.js","Widgets/IconBar.js","Shared/Api/Api.js","UsePrevious.js","Widgets/CurrencyConversion.js","Widgets/Reddit/RedditView.js","Widgets/Reddit/RedditController.js","Widgets/Links.js","Widgets/Panels.js","Widgets/Search/SearchBar.js","Widgets/Weather/WeatherView.js","Widgets/Weather/WeatherController.js","App.js","serviceWorker.js","index.js","Shared/Icons/edit.svg"],"names":["module","exports","__webpack_require__","p","themes","light","id","boxBackground","staticText","dynamicText","background","border","dark","ThemeContext","React","createContext","JSON","parse","window","localStorage","getItem","DateBlock","_ref","timeZone","time","date","react_default","a","createElement","Fragment","Consumer","theme","className","style","color","DateBar","_useState","useState","Date","_useState2","Object","slicedToArray","dateTime","setDateTime","intervalRef","useRef","useEffect","current","setInterval","clearInterval","localDate","toLocaleString","weekday","year","month","day","localTime","toLocaleTimeString","nzTime","moment","toString","tz","format","nzDate","Icon","props","href","url","src","logo","alt","IconBar","EmailLogo","GitHubLogo","GoogleMaps","RedditLogo","TwitchLogo","YoutubeLogo","_callee","from","to","regenerator_default","wrap","_context","prev","next","abrupt","axios","get","concat","process","stop","this","usePrevious","value","ref","availableCurrencies","CurrencyConversion","fromCurrency","setFromCurrency","_useState3","_useState4","toCurrency","setToCurrency","_useState5","_useState6","fromAmount","setFromAmount","_useState7","_useState8","toAmount","setToAmount","_useState9","_useState10","fromTo","setFromTo","previousFrom","previousTo","getExchangeRate","isSettingTo","arguments","length","undefined","_x","_x2","_getCurrencyConversion","apply","Api","then","response","data","val","parseFloat","toFixed","onToChanged","e","target","onFromChanged","onFromCurrencyChanged","newIndex","indexOf","onToCurrencyChanged","type","placeholder","onChange","borderColor","onClick","marginRight","RedditView","loginDisplay","refreshItemDisplay","redditContentDisplay","chosenSubredditDisplay","isChoosingSubreddits","customStyles","control","display","backgroundColor","menuList","provided","objectSpread","multiValue","multiValueLabel","multiValueRemove","react_select_browser_esm","styles","isMulti","closeMenuOnSelect","backspaceRemovesValue","options","availableSubreddits","onSubredditChange","chosenSubreddits","isLoggedIn","content","map","redditItem","name","link","colour","isLoading","pickRandom","onSubmit","errorMessage","EditIcon","toggleChoosingSubreddits","webColour","generalColour","allowedSubreddits","Map","set","label","RedditController","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","getSavedItems","asyncToGenerator","mark","username","password","r","hasError","me","saved","items","chosenSubredditItems","snoowrap","userAgent","clientId","clientSecret","getMe","catch","sent","getSavedContent","forEach","element","categoryColour","subreddit_name_prefixed","push","title","permalink","urlPrefix","find","subreddit","fetchMore","skipReplies","amount","preventDefault","item","setItem","stringify","initialChosenSubredditsJson","initialChosenSubreddits","savedCategories","bind","assertThisInitialized","randomSavedItems","randomItemIndex","Math","floor","random","slice","_this2","Reddit_RedditView","error","context","Component","contextType","Link","links","setLinks","currentLink","setCurrentLink","currentName","setCurrentName","isAddingLinks","setIsAddingLinks","console","log","linksDisplay","index","key","newLinks","splice","localStorageLinks","removeLink","addLinkContent","Panels","Reddit_RedditController","Widgets_CurrencyConversion","Links","SearchBar","currentProviderIndex","setProviderIndex","providers","action","icon","GoogleIcon","YoutubeIcon","RedditIcon","LightOn","LightOff","method","maxNoOfProviders","currentIndex","handleClick","autoComplete","onKeyDown","event","keyCode","handleProviderChange","onThemeChanged","formatTemperature","temp","round","WeatherView","currentWeather","weatherId","ThunderStorm","Rain","HeavyRain","Snow","Fog","ClearSky","FewClouds","ScatteredClouds","BrokenClouds","fontSize","tempMin","tempMax","sunriseTime","sunsetTime","WeatherController","getMyLocation","location","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","weather","main","temp_max","temp_min","wind","speed","sys","sunrise","sunset","_this3","Weather_WeatherView","App","defaultTheme","setTheme","Provider","Weather_WeatherController","Widgets_DateBar","Widgets_IconBar","Search_SearchBar","newTheme","Widgets_Panels","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03e6f44e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.4082623a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.5b316389.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.45bc9386.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitch.3974a3ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.198b0452.svg\";","module.exports = __webpack_public_path__ + \"static/media/GoogleIcon.b5908130.svg\";","module.exports = __webpack_public_path__ + \"static/media/RedditIcon.a0b0f5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/YoutubeIcon.a7c57edd.svg\";","module.exports = __webpack_public_path__ + \"static/media/light-on.52013f07.svg\";","module.exports = __webpack_public_path__ + \"static/media/light-off.957f717d.svg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.f857faf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.922f1f6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.b0cf30aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.ca88433d.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavyRain.531d27ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9a09d698.svg\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.844c1a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b2c0182b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderStorm.0fff53ee.svg\";","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        id: 0,\r\n        boxBackground: \"#d0d0d0\",\r\n        staticText: \"black\",\r\n        dynamicText: \"black\",\r\n        background: \"#b9b9b9\",\r\n        border: \"black\"\r\n    },\r\n    dark: {\r\n        id: 1,\r\n        boxBackground: \"#49505f\",\r\n        staticText: \"#818b9e\",\r\n        dynamicText: \"white\",\r\n        background: \"#383e4b\",\r\n        border: \"#6b7586\"\r\n    }\r\n};\r\n\r\nexport const ThemeContext = React.createContext(\r\n    JSON.parse(window.localStorage.getItem(\"theme\")) || themes.dark\r\n);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport moment from \"moment-timezone\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nfunction DateBar() {\r\n    const [dateTime, setDateTime] = useState(new Date());\r\n    const intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        intervalRef.current = setInterval(() => setDateTime(new Date()), 1000);\r\n\r\n        return function cleanup() {\r\n            clearInterval(intervalRef.current);\r\n        };\r\n    });\r\n\r\n    var localDate = dateTime.toLocaleString(\"th-TH\", {\r\n        weekday: \"short\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n    });\r\n    var localTime = dateTime.toLocaleTimeString(\"it-IT\");\r\n    var nzTime = moment(dateTime.toString())\r\n        .tz(\"NZ\")\r\n        .format(\"HH:mm:ss\");\r\n    var nzDate = moment(dateTime.toString())\r\n        .tz(\"NZ\")\r\n        .format(\"ddd, D MMMM YYYY\");\r\n\r\n    return (\r\n        <div className=\"date-block\">\r\n            <DateBlock\r\n                timeZone=\"Bangkok, Thailand\"\r\n                time={localTime}\r\n                date={localDate}\r\n            />\r\n            <DateBlock\r\n                timeZone=\"Christchurch, New Zealand\"\r\n                time={nzTime}\r\n                date={nzDate}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DateBlock({ timeZone, time, date }) {\r\n    return (\r\n        <React.Fragment>\r\n            <ThemeContext.Consumer>\r\n                {theme => (\r\n                    <div className=\"date\" style={{ color: theme.staticText }}>\r\n                        <div className=\"date-time\">{time}</div>\r\n                        <div className=\"date-formatted\">{date}</div>\r\n                        <div className=\"date-formatted\">{timeZone}</div>\r\n                    </div>\r\n                )}\r\n            </ThemeContext.Consumer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DateBar;\r\n","import React from \"react\";\r\n\r\nimport EmailLogo from \"../Shared/Icons/email.svg\";\r\nimport GitHubLogo from \"../Shared/Icons/github.svg\";\r\nimport GoogleMaps from \"../Shared/Icons/map.svg\";\r\nimport RedditLogo from \"../Shared/Icons/reddit.svg\";\r\nimport TwitchLogo from \"../Shared/Icons/twitch.svg\";\r\nimport YoutubeLogo from \"../Shared/Icons/youtube.svg\";\r\n\r\nfunction IconBar() {\r\n    return (\r\n        <div className=\"icon-bar\">\r\n            <Icon url=\"https://outlook.live.com/mail/inbox\" logo={EmailLogo} />\r\n            <Icon url=\"https://github.com/cameronrw-nz\" logo={GitHubLogo} />\r\n            <Icon url=\"http://maps.google.com\" logo={GoogleMaps} />\r\n            <Icon url=\"https://reddit.com\" logo={RedditLogo} />\r\n            <Icon url=\"https://www.twitch.tv/directory\" logo={TwitchLogo} />\r\n            <Icon url=\"https://youtube.com\" logo={YoutubeLogo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Icon(props) {\r\n    return (\r\n        <a href={props.url}>\r\n            <img src={props.logo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default IconBar;\r\n","import axios from \"axios\";\r\n\r\nexport async function getCurrencyConversion(from, to) {\r\n    return axios.get(\r\n        `https://free.currencyconverterapi.com/api/v6/convert?q=${from}_${to}&compact=y&apiKey=${\r\n            process.env.REACT_APP_CURRENCY_APIKEY\r\n        }`\r\n    );\r\n}\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nexport default function usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as Api from \"../Shared/Api/Api\";\r\nimport usePrevious from \"../UsePrevious\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nconst availableCurrencies = [\"NZD\", \"THB\", \"USD\"];\r\n\r\nfunction CurrencyConversion() {\r\n    const [fromCurrency, setFromCurrency] = useState(\"NZD\");\r\n    const [toCurrency, setToCurrency] = useState(\"THB\");\r\n    const [fromAmount, setFromAmount] = useState(1);\r\n    const [toAmount, setToAmount] = useState(1);\r\n    const [fromTo, setFromTo] = useState(1);\r\n\r\n    const previousFrom = usePrevious(fromCurrency);\r\n    const previousTo = usePrevious(toCurrency);\r\n\r\n    useEffect(() => {\r\n        if (previousFrom !== fromCurrency) {\r\n            getExchangeRate();\r\n        } else if (previousTo !== toCurrency) {\r\n            getExchangeRate(false);\r\n        }\r\n    }, [fromCurrency, toCurrency]);\r\n\r\n    function getExchangeRate(isSettingTo = true) {\r\n        Api.getCurrencyConversion(fromCurrency, toCurrency).then(response => {\r\n            if (\r\n                !response ||\r\n                !response.data ||\r\n                !response.data[`${fromCurrency}_${toCurrency}`]\r\n            ) {\r\n                return;\r\n            }\r\n            setFromTo(response.data[`${fromCurrency}_${toCurrency}`].val);\r\n            if (isSettingTo) {\r\n                setToAmount(\r\n                    (\r\n                        parseFloat(fromAmount) *\r\n                        response.data[`${fromCurrency}_${toCurrency}`].val\r\n                    ).toFixed(2)\r\n                );\r\n            } else {\r\n                setFromAmount(\r\n                    (\r\n                        parseFloat(toAmount) /\r\n                        response.data[`${fromCurrency}_${toCurrency}`].val\r\n                    ).toFixed(2)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    function onToChanged(e) {\r\n        setToAmount(e.target.value);\r\n        setFromAmount((parseFloat(e.target.value) / fromTo).toFixed(2));\r\n    }\r\n\r\n    function onFromChanged(e) {\r\n        setToAmount((parseFloat(e.target.value) * fromTo).toFixed(2));\r\n        setFromAmount(e.target.value);\r\n    }\r\n\r\n    function onFromCurrencyChanged() {\r\n        var currencyIndex = availableCurrencies.indexOf(fromCurrency);\r\n        var newIndex = (currencyIndex + 1) % availableCurrencies.length;\r\n        setFromCurrency(availableCurrencies[newIndex]);\r\n    }\r\n\r\n    function onToCurrencyChanged() {\r\n        var currencyIndex = availableCurrencies.indexOf(toCurrency);\r\n        var newIndex = (currencyIndex + 1) % availableCurrencies.length;\r\n        setToCurrency(availableCurrencies[newIndex]);\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <div className=\"sidepanel-content\">\r\n                    <h2 style={{ color: theme.staticText }}>\r\n                        Currency Converter\r\n                    </h2>\r\n                    <div\r\n                        className=\"sidepanel-link-input\"\r\n                        style={{ color: theme.dynamicText }}\r\n                    >\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"THB\"\r\n                            value={fromAmount}\r\n                            onChange={onFromChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <div\r\n                            className=\"currency\"\r\n                            onClick={onFromCurrencyChanged}\r\n                            style={{\r\n                                marginRight: \"4px\",\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            {fromCurrency}\r\n                        </div>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"NZD\"\r\n                            value={toAmount}\r\n                            onChange={onToChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <div\r\n                            className=\"currency\"\r\n                            onClick={onToCurrencyChanged}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                background: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            {toCurrency}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default CurrencyConversion;\r\n","import React from \"react\";\r\nimport Select from \"react-select/creatable\";\r\n\r\nimport EditIcon from \"../../Shared/Icons/edit.svg\";\r\n\r\nfunction RedditView(props) {\r\n    let loginDisplay;\r\n    let refreshItemDisplay;\r\n    let redditContentDisplay;\r\n    let chosenSubredditDisplay;\r\n\r\n    if (props.isChoosingSubreddits) {\r\n        const customStyles = {\r\n            control: () => ({\r\n                display: \"flex\",\r\n                backgroundColor: props.theme.boxBackground\r\n            }),\r\n            menuList: provided => ({\r\n                ...provided,\r\n                backgroundColor: props.theme.boxBackground\r\n            }),\r\n            multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: props.theme.boxBackground,\r\n                color: props.theme.dynamicText\r\n            }),\r\n            multiValueLabel: provided => ({\r\n                ...provided,\r\n                color: props.theme.dynamicText\r\n            }),\r\n            multiValueRemove: provided => ({\r\n                ...provided,\r\n                color: props.theme.dynamicText\r\n            })\r\n        };\r\n        chosenSubredditDisplay = (\r\n            <div style={{ border: `1px solid ${props.theme.border}` }}>\r\n                <Select\r\n                    styles={customStyles}\r\n                    isMulti={true}\r\n                    closeMenuOnSelect={false}\r\n                    backspaceRemovesValue={true}\r\n                    options={props.availableSubreddits}\r\n                    onChange={props.onSubredditChange}\r\n                    value={props.chosenSubreddits}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (props.isLoggedIn) {\r\n        if (props.content) {\r\n            redditContentDisplay = props.content.map(redditItem => {\r\n                return GetRedditItemDisplay(\r\n                    redditItem.name,\r\n                    redditItem.link,\r\n                    redditItem.colour,\r\n                    props.theme\r\n                );\r\n            });\r\n        }\r\n\r\n        refreshItemDisplay = props.isLoading ? (\r\n            <div style={{ color: props.theme.staticText }}>Loading...</div>\r\n        ) : (\r\n            <div className=\"action-button\" onClick={props.pickRandom}>\r\n                <div\r\n                    className=\"action-button-content\"\r\n                    style={{\r\n                        color: props.theme.staticText,\r\n                        borderColor: props.theme.borderColor\r\n                    }}\r\n                >\r\n                    Refresh\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        loginDisplay = (\r\n            <form onSubmit={props.onSubmit}>\r\n                <div className=\"sidepanel-link-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    />\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"sidepanel-content-button\"\r\n                        style={{\r\n                            borderColor: props.theme.border,\r\n                            background: props.theme.boxBackground,\r\n                            color: props.theme.dynamicText\r\n                        }}\r\n                    >\r\n                        +\r\n                    </button>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                >\r\n                    {props.errorMessage}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2 style={{ color: props.theme.staticText }}>\r\n                Reddit Saved\r\n                <img\r\n                    src={EditIcon}\r\n                    alt=\"Edit subreddits\"\r\n                    onClick={props.toggleChoosingSubreddits}\r\n                />\r\n            </h2>\r\n            {chosenSubredditDisplay}\r\n            {redditContentDisplay}\r\n            {refreshItemDisplay}\r\n            {loginDisplay}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GetRedditItemDisplay(name, link, colour, theme) {\r\n    return (\r\n        <a href={`https://reddit.com/${link}`}>\r\n            <div\r\n                className=\"section-item\"\r\n                style={{ backgroundColor: colour, borderColor: theme.border }}\r\n            >\r\n                {name}\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default RedditView;\r\n","import React from \"react\";\r\nimport snoowrap from \"snoowrap\";\r\n\r\nimport RedditView from \"./RedditView\";\r\nimport { ThemeContext } from \"../../Shared/Theme/ThemeContext\";\r\n\r\nconst webColour = \"rgb(64.4%, 29.1%, 29.1%)\";\r\nconst dotnetColour = \"rgb(34.6%, 39.5%, 64.8%)\";\r\nconst generalProgrammingColour = \"rgb(30.6%, 60.9%, 35.9%)\";\r\nconst generalColour = \"rgb(53%, 38.9%, 50.9%)\";\r\nconst allowedSubreddits = new Map();\r\nallowedSubreddits.set(\"r/reactjs\", webColour);\r\nallowedSubreddits.set(\"r/programming\", generalProgrammingColour);\r\nallowedSubreddits.set(\"r/webdev\", webColour);\r\nallowedSubreddits.set(\"r/learnprogramming\", generalProgrammingColour);\r\nallowedSubreddits.set(\"r/csharp\", dotnetColour);\r\nallowedSubreddits.set(\"r/web_design\", webColour);\r\nallowedSubreddits.set(\"r/javascript\", webColour);\r\n\r\nconst availableSubreddits = [\r\n    { value: \"r/reactjs\", label: \"r/reactjs\" },\r\n    { value: \"r/programming\", label: \"r/programming\" },\r\n    { value: \"r/webdev\", label: \"r/webdev\" },\r\n    { value: \"r/learnprogramming\", label: \"r/learnprogramming\" },\r\n    { value: \"r/csharp\", label: \"r/csharp\" },\r\n    { value: \"r/web_design\", label: \"r/web_design\" },\r\n    { value: \"r/javascript\", label: \"r/javascript\" }\r\n];\r\n\r\nclass RedditController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const initialChosenSubredditsJson = window.localStorage.getItem(\r\n            \"subreddits\"\r\n        );\r\n        const initialChosenSubreddits = initialChosenSubredditsJson\r\n            ? JSON.parse(initialChosenSubredditsJson)\r\n            : availableSubreddits;\r\n\r\n        this.state = {\r\n            savedCategories: undefined,\r\n            availableSubreddits: availableSubreddits,\r\n            chosenSubreddits: initialChosenSubreddits,\r\n            isChoosingSubreddits: false\r\n        };\r\n\r\n        this.pickRandom = this.pickRandom.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (\r\n            process.env.REACT_APP_REDDIT_USERNAME === \"\" ||\r\n            process.env.REACT_APP_REDDIT_PASSWORD === \"\"\r\n        ) {\r\n            return;\r\n        } else {\r\n            await this.getSavedItems(\r\n                process.env.REACT_APP_REDDIT_USERNAME,\r\n                process.env.REACT_APP_REDDIT_PASSWORD\r\n            );\r\n        }\r\n    }\r\n\r\n    toggleChoosingSubreddits = () => {\r\n        this.setState({\r\n            isChoosingSubreddits: !this.state.isChoosingSubreddits\r\n        });\r\n    };\r\n\r\n    getSavedItems = async (username, password) => {\r\n        // Replace with actual connection to reddit.\r\n        const r = new snoowrap({\r\n            userAgent: \"Saved Info/0.1 by Darzolak\",\r\n            clientId: process.env.REACT_APP_REDDIT_CLIENTID,\r\n            clientSecret: process.env.REACT_APP_REDDIT_CLIENTSECRET,\r\n            username: username,\r\n            password: password\r\n        });\r\n\r\n        var hasError = false;\r\n        var me = await r.getMe().catch(e => (hasError = true));\r\n\r\n        if (hasError) {\r\n            this.setState({\r\n                isLoggedIn: false,\r\n                errorMessage: \"Username or Password was incorrect.\"\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({ isLoggedIn: true });\r\n        }\r\n        var saved = await me.getSavedContent();\r\n\r\n        var items = [];\r\n        let chosenSubredditItems = [];\r\n        saved.forEach(element => {\r\n            const categoryColour =\r\n                allowedSubreddits.get(element.subreddit_name_prefixed) ||\r\n                generalColour;\r\n            items.push({\r\n                name: element.title,\r\n                link: element.permalink,\r\n                colour: categoryColour,\r\n                urlPrefix: element.subreddit_name_prefixed\r\n            });\r\n            if (\r\n                this.state.chosenSubreddits.find(\r\n                    subreddit =>\r\n                        subreddit.value === element.subreddit_name_prefixed\r\n                )\r\n            ) {\r\n                chosenSubredditItems.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n            }\r\n        });\r\n\r\n        this.setState({ items, chosenSubredditItems });\r\n        this.pickRandom(chosenSubredditItems);\r\n\r\n        // Fetch More\r\n        saved = await saved.fetchMore({\r\n            skipReplies: true,\r\n            amount: 100\r\n        });\r\n\r\n        items = [];\r\n        chosenSubredditItems = [];\r\n        saved.forEach(element => {\r\n            const categoryColour =\r\n                allowedSubreddits.get(element.subreddit_name_prefixed) ||\r\n                generalColour;\r\n            items.push({\r\n                name: element.title,\r\n                link: element.permalink,\r\n                colour: categoryColour,\r\n                urlPrefix: element.subreddit_name_prefixed\r\n            });\r\n            if (\r\n                this.state.chosenSubreddits.find(\r\n                    subreddit =>\r\n                        subreddit.value === element.subreddit_name_prefixed\r\n                )\r\n            ) {\r\n                chosenSubredditItems.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n            }\r\n        });\r\n        this.setState({ items, chosenSubredditItems });\r\n        return true;\r\n    };\r\n\r\n    pickRandom(chosenSubredditItems) {\r\n        if (!chosenSubredditItems) {\r\n            return;\r\n        }\r\n\r\n        let randomSavedItems;\r\n        if (chosenSubredditItems.length > 7) {\r\n            const randomItemIndex = Math.floor(\r\n                Math.random() * (chosenSubredditItems.length - 7)\r\n            );\r\n            randomSavedItems = chosenSubredditItems.slice(\r\n                randomItemIndex,\r\n                randomItemIndex + 7\r\n            );\r\n        } else {\r\n            randomSavedItems = chosenSubredditItems;\r\n        }\r\n\r\n        this.setState({ randomSavedItems });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const username = e.target[0].value;\r\n        const password = e.target[1].value;\r\n\r\n        if (username && password) {\r\n            this.getSavedItems(username, password);\r\n        }\r\n    };\r\n\r\n    onSubredditChange = chosenSubreddits => {\r\n        const chosenSubredditItems = [];\r\n        this.state.items &&\r\n            this.state.items.forEach(item => {\r\n                if (\r\n                    !chosenSubreddits ||\r\n                    chosenSubreddits.length === 0 ||\r\n                    chosenSubreddits.find(\r\n                        subreddit => subreddit.value === item.urlPrefix\r\n                    )\r\n                ) {\r\n                    chosenSubredditItems.push(item);\r\n                }\r\n            });\r\n        this.setState({ chosenSubreddits, chosenSubredditItems });\r\n        this.pickRandom(chosenSubredditItems);\r\n\r\n        localStorage.setItem(\"subreddits\", JSON.stringify(chosenSubreddits));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RedditView\r\n                content={this.state.randomSavedItems}\r\n                error={this.state.error}\r\n                isLoading={this.state.items === undefined}\r\n                pickRandom={() =>\r\n                    this.pickRandom(this.state.chosenSubredditItems)\r\n                }\r\n                isLoggedIn={this.state.isLoggedIn}\r\n                onSubmit={this.onSubmit}\r\n                theme={this.context}\r\n                errorMessage={this.state.errorMessage}\r\n                availableSubreddits={this.state.availableSubreddits}\r\n                chosenSubreddits={this.state.chosenSubreddits}\r\n                onSubredditChange={this.onSubredditChange}\r\n                isChoosingSubreddits={this.state.isChoosingSubreddits}\r\n                toggleChoosingSubreddits={this.toggleChoosingSubreddits}\r\n            />\r\n        );\r\n    }\r\n}\r\nRedditController.contextType = ThemeContext;\r\n\r\nexport default RedditController;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport EditIcon from \"../Shared/Icons/edit.svg\";\r\n\r\nfunction Link(props) {\r\n    const [links, setLinks] = useState([]);\r\n    const [currentLink, setCurrentLink] = useState(\"\");\r\n    const [currentName, setCurrentName] = useState(\"\");\r\n    const [isAddingLinks, setIsAddingLinks] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLinks(JSON.parse(window.localStorage.getItem(\"links\")));\r\n        console.log(\"loading\");\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        let newLinks = links;\r\n        if (!newLinks) {\r\n            newLinks = [];\r\n        }\r\n\r\n        newLinks.push({\r\n            link: currentLink,\r\n            name: currentName\r\n        });\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(newLinks));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n        setCurrentLink(\"\");\r\n        setCurrentName(\"\");\r\n    };\r\n\r\n    const removeLink = (e, index) => {\r\n        e.preventDefault();\r\n        let newLinks = links;\r\n        if (!newLinks) {\r\n            newLinks = [];\r\n        }\r\n\r\n        newLinks.splice(index, 1);\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(newLinks));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n    };\r\n\r\n    const linksDisplay = links\r\n        ? links.map((element, index) => {\r\n              return (\r\n                  <a key=\"index\" href={element.link}>\r\n                      <div\r\n                          className=\"section-item\"\r\n                          style={{\r\n                              color: props.theme.staticText,\r\n                              borderColor: props.theme.border,\r\n                              backgroundColor: props.theme.boxBackground\r\n                          }}\r\n                      >\r\n                          <div className=\"section-item-content\">\r\n                              {element.name}\r\n                          </div>\r\n                          <div\r\n                              className=\"section-item-action\"\r\n                              onClick={e => removeLink(e, index)}\r\n                          >\r\n                              -\r\n                          </div>\r\n                      </div>\r\n                  </a>\r\n              );\r\n          })\r\n        : undefined;\r\n\r\n    const addLinkContent = isAddingLinks ? (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"sidepanel-link-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => setCurrentName(e.target.value)}\r\n                    placeholder=\"Name\"\r\n                    value={currentName}\r\n                    style={{\r\n                        marginRight: \"4px\",\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => setCurrentLink(e.target.value)}\r\n                    placeholder=\"Link\"\r\n                    value={currentLink}\r\n                    style={{\r\n                        marginRight: \"4px\",\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"sidepanel-content-button\"\r\n                    style={{\r\n                        borderColor: props.theme.border,\r\n                        background: props.theme.boxBackground,\r\n                        color: props.theme.dynamicText\r\n                    }}\r\n                >\r\n                    +\r\n                </button>\r\n            </div>\r\n        </form>\r\n    ) : (\r\n        undefined\r\n    );\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2 style={{ color: props.theme.staticText }}>\r\n                Links{\" \"}\r\n                <img\r\n                    src={EditIcon}\r\n                    alt=\"Edit Links\"\r\n                    onClick={() => setIsAddingLinks(!isAddingLinks)}\r\n                />\r\n            </h2>\r\n            {addLinkContent}\r\n            {linksDisplay}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Link;\r\n","import React from \"react\";\r\nimport CurrencyConversion from \"./CurrencyConversion\";\r\nimport RedditController from \"./Reddit/RedditController\";\r\nimport Link from \"./Links\";\r\nimport { ThemeContext } from \"../Shared/Theme/ThemeContext\";\r\n\r\nfunction Panels() {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <div className=\"panels\">\r\n                    <RedditController />\r\n                    <CurrencyConversion />\r\n                    <Link theme={theme} />\r\n                </div>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default Panels;\r\n","import React, { useState } from \"react\";\r\n\r\nimport GoogleIcon from \"./Resources/GoogleIcon.svg\";\r\nimport RedditIcon from \"./Resources/RedditIcon.svg\";\r\nimport YoutubeIcon from \"./Resources/YoutubeIcon.svg\";\r\nimport { ThemeContext, themes } from \"../../Shared/Theme/ThemeContext\";\r\nimport LightOn from \"../../Shared/Icons/light-on.svg\";\r\nimport LightOff from \"../../Shared/Icons/light-off.svg\";\r\n\r\nfunction SearchBar(props) {\r\n    const [currentProviderIndex, setProviderIndex] = useState(0);\r\n\r\n    function handleProviderChange(event, maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        if (event.keyCode === 38) {\r\n            currentIndex--;\r\n        } else if (event.keyCode === 40) {\r\n            currentIndex++;\r\n        }\r\n\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    function handleClick(maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        currentIndex++;\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    var providers = [\r\n        {\r\n            action: \"https://www.google.com/search\",\r\n            placeholder: \"Search Google\",\r\n            icon: GoogleIcon\r\n        },\r\n        {\r\n            action: \"https://www.youtube.com/results?search_query\",\r\n            placeholder: \"Search Youtube\",\r\n            icon: YoutubeIcon\r\n        },\r\n        {\r\n            action: \"https://www.reddit.com/search\",\r\n            placeholder: \"Search Reddit\",\r\n            icon: RedditIcon\r\n        }\r\n    ];\r\n\r\n    const icon = props.theme.id === themes.dark.id ? LightOn : LightOff;\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {theme => (\r\n                <form\r\n                    action={providers[currentProviderIndex].action}\r\n                    method=\"get\"\r\n                    name=\"searchform\"\r\n                >\r\n                    <div\r\n                        className=\"search-bar\"\r\n                        style={{\r\n                            color: theme.dynamicText\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"search-bar-icon\"\r\n                            onClick={() => handleClick(providers.length)}\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                backgroundColor: theme.boxBackground\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={providers[currentProviderIndex].icon}\r\n                                alt=\"Switch Search Provider\"\r\n                            />\r\n                        </div>\r\n                        <input\r\n                            className=\"search-bar-search\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            name=\"q\"\r\n                            onKeyDown={event =>\r\n                                handleProviderChange(event, providers.length)\r\n                            }\r\n                            style={{\r\n                                borderColor: theme.border,\r\n                                backgroundColor: theme.boxBackground,\r\n                                color: theme.dynamicText\r\n                            }}\r\n                        />\r\n                        <img\r\n                            src={icon}\r\n                            className=\"light-icon\"\r\n                            onClick={props.onThemeChanged}\r\n                            alt=\"logo\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nimport BrokenClouds from \"./Resources/brokenClouds.svg\";\r\nimport ClearSky from \"./Resources/clearSky.svg\";\r\nimport FewClouds from \"./Resources/fewClouds.svg\";\r\nimport Fog from \"./Resources/fog.svg\";\r\nimport HeavyRain from \"./Resources/heavyRain.svg\";\r\nimport Rain from \"./Resources/rain.svg\";\r\nimport ScatteredClouds from \"./Resources/scatteredClouds.svg\";\r\nimport Snow from \"./Resources/snow.svg\";\r\nimport ThunderStorm from \"./Resources/thunderStorm.svg\";\r\n\r\nfunction WeatherView(props) {\r\n    let icon = null;\r\n    if (props.currentWeather.weatherId !== null) {\r\n        switch (props.currentWeather.weatherId.toString()[0]) {\r\n            case \"2\":\r\n                icon = ThunderStorm;\r\n                break;\r\n            case \"3\":\r\n                icon = Rain;\r\n                break;\r\n            case \"5\":\r\n                icon = HeavyRain;\r\n                break;\r\n            case \"6\":\r\n                icon = Snow;\r\n                break;\r\n            case \"7\":\r\n                icon = Fog;\r\n                break;\r\n            case \"8\":\r\n                switch (props.currentWeather.weatherId) {\r\n                    case 800:\r\n                        icon = ClearSky;\r\n                        break;\r\n                    case 801:\r\n                        icon = FewClouds;\r\n                        break;\r\n                    case 802:\r\n                        icon = ScatteredClouds;\r\n                        break;\r\n                    case 803:\r\n                    case 804:\r\n                        icon = BrokenClouds;\r\n                        break;\r\n                    default:\r\n                        icon = null;\r\n                }\r\n                break;\r\n            default:\r\n                icon = null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\" style={{ color: props.context.staticText }}>\r\n            <div className=\"weather-current-primary\">\r\n                <div className=\"flex-item\">\r\n                    {formatTemperature(props.currentWeather.temp)}\r\n                    <img\r\n                        src={icon}\r\n                        className=\"weather-primary-icon\"\r\n                        alt=\"logo\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"weather-current-secondary\">\r\n                <div className=\"flex\" style={{ fontSize: \"16px\" }}>\r\n                    {formatTemperature(props.currentWeather.tempMin) +\r\n                        \" - \" +\r\n                        formatTemperature(props.currentWeather.tempMax)}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunrise: \" +\r\n                        new Date(\r\n                            props.currentWeather.sunriseTime * 1000\r\n                        ).toLocaleTimeString(\"it-IT\")}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunset: \" +\r\n                        new Date(\r\n                            props.currentWeather.sunsetTime * 1000\r\n                        ).toLocaleTimeString(\"it-IT\")}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction formatTemperature(temp) {\r\n    return Math.round(temp * 10) / 10 + \"\\xB0C\";\r\n}\r\n\r\nexport default WeatherView;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport WeatherView from \"./WeatherView\";\r\nimport { ThemeContext } from \"../../Shared/Theme/ThemeContext\";\r\n\r\nclass WeatherController extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentWeather: null\r\n        };\r\n\r\n        this.getMyLocation = this.getMyLocation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMyLocation();\r\n    }\r\n\r\n    getMyLocation() {\r\n        const location = window.navigator && window.navigator.geolocation;\r\n\r\n        if (location) {\r\n            location.getCurrentPosition(\r\n                position => {\r\n                    this.getWeatherData(\r\n                        position.coords.latitude,\r\n                        position.coords.longitude\r\n                    );\r\n                },\r\n                error => {}\r\n            );\r\n        }\r\n    }\r\n\r\n    // Bad practice to show API key but since it's a free acc it doesn't matter\r\n    async getWeatherData(latitude, longitude) {\r\n        axios\r\n            .get(\r\n                \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n                    latitude +\r\n                    \"&lon=\" +\r\n                    longitude +\r\n                    \"&units=metric&dt=UTC&APPID=\" +\r\n                    process.env.REACT_APP_WEATHER_APIKEY\r\n            )\r\n            .then(response => {\r\n                var currentWeather = {\r\n                    weatherId: response.data.weather[0].id,\r\n                    temp: response.data.main.temp,\r\n                    tempMax: response.data.main.temp_max,\r\n                    tempMin: response.data.main.temp_min,\r\n                    wind: response.data.wind.speed,\r\n                    sunriseTime: response.data.sys.sunrise,\r\n                    sunsetTime: response.data.sys.sunset\r\n                };\r\n                this.setState({\r\n                    currentWeather: currentWeather\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const theme = this.context;\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.currentWeather === null ? (\r\n                    <div />\r\n                ) : (\r\n                    <WeatherView\r\n                        context={theme}\r\n                        currentWeather={this.state.currentWeather}\r\n                    />\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nWeatherController.contextType = ThemeContext;\r\n\r\nexport default WeatherController;\r\n","import React, { useState } from \"react\";\r\n\r\nimport DateBar from \"./Widgets/DateBar\";\r\nimport IconBar from \"./Widgets/IconBar\";\r\nimport Panels from \"./Widgets/Panels\";\r\nimport SearchBar from \"./Widgets/Search/SearchBar\";\r\nimport Weather from \"./Widgets/Weather/WeatherController\";\r\nimport { ThemeContext, themes } from \"./Shared/Theme/ThemeContext\";\r\n\r\nimport \"./Styles/App.css\";\r\n\r\nfunction App() {\r\n    const defaultTheme = window.localStorage.getItem(\"theme\");\r\n    const [theme, setTheme] = useState(\r\n        defaultTheme ? JSON.parse(defaultTheme) : themes.dark\r\n    );\r\n\r\n    const toggleTheme = () => {\r\n        const newTheme =\r\n            theme.id === themes.dark.id ? themes.light : themes.dark;\r\n        setTheme(newTheme);\r\n        localStorage.setItem(\"theme\", JSON.stringify(newTheme));\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={theme}>\r\n            <div className=\"app\" style={{ backgroundColor: theme.background }}>\r\n                <div className=\"app-header\">\r\n                    <Weather />\r\n                    <DateBar />\r\n                </div>\r\n                <header className=\"app-content\">\r\n                    <IconBar />\r\n                    <SearchBar theme={theme} onThemeChanged={toggleTheme} />\r\n                    <Panels />\r\n                </header>\r\n            </div>\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./Styles/index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/edit.d81f3528.svg\";"],"sourceRoot":""}