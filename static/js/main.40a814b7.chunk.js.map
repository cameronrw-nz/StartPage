{"version":3,"sources":["Icons/email.svg","Icons/github.svg","Icons/map.svg","Icons/reddit.svg","Icons/twitch.svg","Icons/youtube.svg","Widgets/Weather/Resources/brokenClouds.svg","Widgets/Weather/Resources/clearSky.svg","Widgets/Weather/Resources/fewClouds.svg","Widgets/Weather/Resources/fog.svg","Widgets/Weather/Resources/heavyRain.svg","Widgets/Weather/Resources/rain.svg","Widgets/Weather/Resources/scatteredClouds.svg","Widgets/Weather/Resources/snow.svg","Widgets/Weather/Resources/thunderStorm.svg","Widgets/DateBar.js","Widgets/IconBar.js","Widgets/SearchBar.js","Widgets/Weather/Resources/WeatherConstants.js","Widgets/Weather/WeatherView.js","Widgets/Weather/WeatherController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","toLocaleString","weekday","year","month","day","time","toLocaleTimeString","_this2","interval","setInterval","setState","clearInterval","react_default","a","createElement","className","React","Component","IconBar","href","src","EmailLogo","alt","GitHubLogo","GoogleMaps","RedditLogo","TwitchLogo","YoutubeLogo","SearchBar","currentProviderIndex","handleProviderChange","bind","assertThisInitialized","event","maxNoOfProviders","keyCode","providers","action","placeholder","method","name","autoComplete","type","onKeyDown","length","id200","id201","id202","id210","id211","id212","id221","id230","id231","id232","id300","id301","id302","id310","id311","id312","id313","id314","id321","id500","id501","id502","id503","id504","id511","id520","id521","id522","id531","id600","id601","id602","id611","id612","id615","id616","id620","id621","id622","id701","id711","id721","id731","id741","id751","id761","id762","id771","id781","id800","id801","id802","id803","id804","WeatherView","currentWeather","weatherId","WeatherIds","icon","toString","ThunderStorm","Rain","HeavyRain","Snow","Fog","ClearSky","FewClouds","ScatteredClouds","BrokenClouds","Math","round","temp","sunriseTime","sunsetTime","WeatherController","wind","getMyLocation","location","window","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","error","axios","get","then","response","data","weather","id","main","speed","sys","sunrise","sunset","_this3","Weather_WeatherView","App","Widgets_DateBar","Weather_WeatherController","Widgets_SearchBar","Widgets_IconBar","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,isECoCzBC,cAjCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,MAAM,IAAIC,MAAOC,eAAe,QAAS,CAACC,QAAS,QAASC,KAAM,UAAWC,MAAO,OAAQC,IAAK,YACjGC,MAAM,IAAIN,MAAOO,mBAAmB,UALzBhB,mFAQC,IAAAiB,EAAAd,KAChBA,KAAKe,SAAWC,YAAY,kBAAMF,EAAKG,SAAS,CAC5CZ,MAAM,IAAIC,MAAOC,eAAe,QAAS,CAACC,QAAS,QAASC,KAAM,UAAWC,MAAO,OAAQC,IAAK,YACjGC,MAAM,IAAIN,MAAOO,mBAAmB,YACnC,oDAILK,cAAclB,KAAKe,2CAInB,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVtB,KAAKI,MAAMQ,MAEhBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVtB,KAAKI,MAAMC,cA3BVkB,IAAMC,iHCkCbC,mLAzBP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,KAAGK,KAAK,uCACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAWN,UAAU,gBAAgBO,IAAI,UAEvDV,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sBACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKG,IAAYR,UAAU,gBAAgBO,IAAI,UAExDV,EAAAC,EAAAC,cAAA,KAAGK,KAAK,0BACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKI,IAAYT,UAAU,gBAAgBO,IAAI,UAExDV,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sBACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKK,IAAYV,UAAU,gBAAgBO,IAAI,UAExDV,EAAAC,EAAAC,cAAA,KAAGK,KAAK,mCACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKM,IAAYX,UAAU,gBAAgBO,IAAI,UAExDV,EAAAC,EAAAC,cAAA,KAAGK,KAAK,uBACJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKO,IAAaZ,UAAU,gBAAgBO,IAAI,kBApBnDN,IAAMC,kBCmDbW,cAzDX,SAAAA,EAAYvC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACftC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTgC,qBAAsB,GAG1BvC,EAAKwC,qBAAuBxC,EAAKwC,qBAAqBC,KAA1BxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KAPbA,oFAUE2C,EAAOC,GACxB,IAAIL,EAAuBpC,KAAKI,MAAMgC,qBAChB,KAAlBI,EAAME,QACNN,IAEuB,KAAlBI,EAAME,SACXN,IAGJpC,KAAKiB,SAAS,CACVmB,sBAAuBA,EAAuBK,EAAmBA,GAAoBA,qCAIpF,IAAA3B,EAAAd,KACD2C,EAAY,CACZ,CACIC,OAAQ,gCACRC,YAAa,iBAEjB,CACID,OAAQ,+CACRC,YAAa,kBAEjB,CACID,OAAQ,gCACRC,YAAa,kBAKrB,OACI1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMuB,OAAQD,EAAU3C,KAAKI,MAAMgC,sBAAsBQ,OAAQE,OAAO,MAAMC,KAAK,cAC/E5B,EAAAC,EAAAC,cAAA,SACIC,UAAU,oBACV0B,aAAa,MACbC,KAAK,OACLF,KAAK,IACLF,YAAaF,EAAU3C,KAAKI,MAAMgC,sBAAsBS,YACxDK,UAAW,SAACV,GAAD,OAAW1B,EAAKuB,qBAAqBG,EAAOG,EAAUQ,oBAnDjE5B,IAAMC,oDCFjB4B,EAAQ,+BACRC,EAAQ,yBACRC,EAAQ,+BACRC,EAAQ,qBACRC,EAAQ,eACRC,EAAQ,qBACRC,EAAQ,sBACRC,EAAQ,kCACRC,EAAQ,4BACRC,EAAQ,kCAERC,EAAQ,gBACRC,EAAQ,UACRC,EAAQ,gBACRC,EAAQ,gBACRC,EAAQ,UACRC,EAAQ,gBACRC,EAAQ,cACRC,EAAQ,oBACRC,EAAQ,iBAERC,EAAQ,aACRC,GAAQ,OACRC,GAAQ,aACRC,GAAQ,kBACRC,GAAQ,eACRC,GAAQ,gBACRC,GAAQ,aACRC,GAAQ,OACRC,GAAQ,aACRC,GAAQ,OAERC,GAAQ,aACRC,GAAQ,OACRC,GAAQ,aACRC,GAAQ,QACRC,GAAQ,cACRC,GAAQ,sBACRC,GAAQ,gBACRC,GAAQ,aACRC,GAAQ,OACRC,GAAQ,aAERC,GAAQ,OACRC,GAAQ,QACRC,GAAQ,OACRC,GAAQ,OACRC,GAAQ,MACRC,GAAQ,OACRC,GAAQ,OACRC,GAAQ,eACRC,GAAQ,UACRC,GAAQ,UAERC,GAAQ,YAERC,GAAQ,aACRC,GAAQ,mBACRC,GAAQ,gBACRC,GAAQ,+LCoBNC,OAlEf,SAAqB9G,GACoC,OAAnCA,EAAM+G,eAAeC,WAAqBC,EAAW,KAAOjH,EAAM+G,eAAeC,WAAnG,IAEIE,EAAO,KACX,GAAuC,OAAnClH,EAAM+G,eAAeC,UACrB,OAAQhH,EAAM+G,eAAeC,UAAUG,WAAW,IAC9C,IAAK,IACDD,EAAOE,KACP,MACJ,IAAK,IACDF,EAAOG,KACP,MACJ,IAAK,IACDH,EAAOI,KACP,MACJ,IAAK,IACDJ,EAAOK,KACP,MACJ,IAAK,IACDL,EAAOM,KACP,MACJ,IAAK,IACD,OAAQxH,EAAM+G,eAAeC,WACzB,KAAK,IACDE,EAAOO,KACP,MACJ,KAAK,IACDP,EAAOQ,KACP,MACJ,KAAK,IACDR,EAAOS,KACP,MACJ,KAAK,IACL,KAAK,IACDT,EAAOU,KACP,MACJ,QACIV,EAAO,KAEf,MACJ,QACIA,EAAO,KAInB,OACI3F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACNmG,KAAKC,MAAkC,GAA5B9H,EAAM+G,eAAegB,MAAc,GAAK,QACxDxG,EAAAC,EAAAC,cAAA,OAAKM,IAAKmF,EAAMxF,UAAU,uBAAuBO,IAAI,WAI7DV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACV,YAAc,IAAIhB,KAAsC,IAAjCV,EAAM+G,eAAeiB,aAAkB/G,mBAAmB,UAEtFM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACV,WAAa,IAAIhB,KAAqC,IAAhCV,EAAM+G,eAAekB,YAAiBhH,mBAAmB,aCLrFiH,eA7DX,SAAAA,IAAc,IAAAjI,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8H,GAAA,OACVjI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgI,GAAA3H,KAAAH,QAUKI,MAAQ,CACTuG,eATiB,CACjBC,UAAW,KACXe,KAAM,KACNI,KAAM,KACNH,YAAa,KACbC,WAAY,OAOhBhI,EAAKmI,cAAgBnI,EAAKmI,cAAc1F,KAAnBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KAfXA,mFAmBVG,KAAKgI,wDAGO,IAAAlH,EAAAd,KACNiI,EAAWC,OAAOC,WAAaD,OAAOC,UAAUC,YAElDH,GACAA,EAASI,mBAAmB,SAACC,GACzBxH,EAAKyH,eAAeD,EAASE,OAAOC,SAAUH,EAASE,OAAOE,YAC/D,SAACC,qFAOSF,EAAUC,8EAC3BE,IACKC,IAAI,sDAAwDJ,EAAY,QAAUC,EAAY,+DAC9FI,KACG,SAAAC,GAEI,IAAIpC,EAAiB,CACjBC,UAAWmC,EAASC,KAAKC,QAAQ,GAAGC,GACpCvB,KAAMoB,EAASC,KAAKG,KAAKxB,KACzBI,KAAMgB,EAASC,KAAKjB,KAAKqB,MACzBxB,YAAamB,EAASC,KAAKK,IAAIC,QAC/BzB,WAAYkB,EAASC,KAAKK,IAAIE,QAElCC,EAAKvI,SAAS,CACV0F,eAAiBA,4IAMjC,OACIxF,EAAAC,EAAAC,cAACoI,GAAD,CAAa9C,eAAgB3G,KAAKI,MAAMuG,wBAzDpBpF,IAAMC,WCsBvBkI,2LAfP,OACIvI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACsI,EAAD,MACAxI,EAAAC,EAAAC,cAACuI,GAAD,OAEJzI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACdH,EAAAC,EAAAC,cAACwI,EAAD,MACA1I,EAAAC,EAAAC,cAACyI,EAAD,eAVFtI,cCEEuI,QACW,cAA7B7B,OAAOD,SAAS+B,UAEe,UAA7B9B,OAAOD,SAAS+B,UAEhB9B,OAAOD,SAAS+B,SAASC,MACvB,iECVNC,IAASC,OAAOhJ,EAAAC,EAAAC,cAAC+I,GAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.40a814b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.4082623a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.5b316389.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.45bc9386.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitch.3974a3ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.198b0452.svg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.f857faf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.922f1f6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.b0cf30aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.ca88433d.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavyRain.531d27ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9a09d698.svg\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.844c1a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b2c0182b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderStorm.0fff53ee.svg\";","import React from 'react'\r\n\r\nclass DateBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: new Date().toLocaleString('en-GB', {weekday: 'short', year: 'numeric', month: 'long', day: 'numeric'}),\r\n            time: new Date().toLocaleTimeString('it-IT')\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState({ \r\n            date: new Date().toLocaleString('en-GB', {weekday: 'short', year: 'numeric', month: 'long', day: 'numeric'}),\r\n            time: new Date().toLocaleTimeString('it-IT')\r\n         }), 1000);\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"date\">\r\n                <div className=\"date-time\">\r\n                    {this.state.time}\r\n                </div>\r\n                <div className=\"date-formatted\">\r\n                    {this.state.date}\r\n                </div>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default DateBar","import React from 'react'\r\n\r\nimport EmailLogo from '../Icons/email.svg'\r\nimport GitHubLogo from '../Icons/github.svg'\r\nimport GoogleMaps from '../Icons/map.svg'\r\nimport RedditLogo from '../Icons/reddit.svg'\r\nimport TwitchLogo from '../Icons/twitch.svg'\r\nimport YoutubeLogo from '../Icons/youtube.svg'\r\n\r\nclass IconBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"icon-bar\">\r\n                <a href=\"https://outlook.live.com/mail/inbox\">\r\n                    <img src={EmailLogo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n                <a href=\"https://github.com\">\r\n                    <img src={GitHubLogo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n                <a href=\"http://maps.google.com\">\r\n                    <img src={GoogleMaps} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n                <a href=\"https://reddit.com\">\r\n                    <img src={RedditLogo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n                <a href=\"https://www.twitch.tv/directory\">\r\n                    <img src={TwitchLogo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n                <a href=\"https://youtube.com\">\r\n                    <img src={YoutubeLogo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IconBar","import React from 'react'\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props) \r\n\r\n        this.state = {\r\n            currentProviderIndex: 0\r\n        }\r\n\r\n        this.handleProviderChange = this.handleProviderChange.bind(this)\r\n    }\r\n\r\n    handleProviderChange(event, maxNoOfProviders) {\r\n        var currentProviderIndex = this.state.currentProviderIndex;\r\n        if (event.keyCode === 38){\r\n            currentProviderIndex--;\r\n        }\r\n        else if (event.keyCode === 40) {\r\n            currentProviderIndex++;\r\n        }\r\n        \r\n        this.setState({\r\n            currentProviderIndex: (currentProviderIndex % maxNoOfProviders + maxNoOfProviders) % maxNoOfProviders \r\n        })\r\n    }\r\n\r\n    render() {\r\n        var providers = [\r\n            {\r\n                action: \"https://www.google.com/search\",\r\n                placeholder: \"Search Google\"\r\n            },\r\n            {\r\n                action: \"https://www.youtube.com/results?search_query\",\r\n                placeholder: \"Search Youtube\"\r\n            },\r\n            {\r\n                action: \"https://www.reddit.com/search\",\r\n                placeholder: \"Search Reddit\"\r\n            }\r\n        ];\r\n\r\n        \r\n        return (\r\n            <div>\r\n                <form action={providers[this.state.currentProviderIndex].action} method=\"get\" name=\"searchform\">\r\n                    <input \r\n                        className=\"search-bar-search\" \r\n                        autoComplete=\"off\" \r\n                        type=\"text\" \r\n                        name=\"q\" \r\n                        placeholder={providers[this.state.currentProviderIndex].placeholder}\r\n                        onKeyDown={(event) => this.handleProviderChange(event, providers.length)} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","export const id200 = \"Thunderstorm with Light Rain\"\r\nexport const id201 = \"Thunderstorm with Rain\"\r\nexport const id202 = \"Thunderstorm with Heavy Rain\"\r\nexport const id210 = \"Light Thunderstorm\"\r\nexport const id211 = \"Thunderstorm\"\r\nexport const id212 = \"Heavy Thunderstorm\"\r\nexport const id221 = \"Ragged Thunderstorm\"\r\nexport const id230 = \"Thunderstorm with Light Drizzle\"\r\nexport const id231 = \"Thunderstorm with Drizzle\"\r\nexport const id232 = \"Thunderstorm with Heavy Drizzle\"\r\n\r\nexport const id300 = \"Light Drizzle\"\r\nexport const id301 = \"Drizzle\"\r\nexport const id302 = \"Heavy Drizzle\"\r\nexport const id310 = \"Light Drizzle\"\r\nexport const id311 = \"Drizzle\"\r\nexport const id312 = \"Heavy Drizzle\"\r\nexport const id313 = \"Shower Rain\"\r\nexport const id314 = \"Heavy Shower Rain\"\r\nexport const id321 = \"Shower Drizzle\"\r\n\r\nexport const id500 = \"Light Rain\"\r\nexport const id501 = \"Rain\"\r\nexport const id502 = \"Heavy Rain\"\r\nexport const id503 = \"Very Heavy Rain\"\r\nexport const id504 = \"Extreme Rain\"\r\nexport const id511 = \"Freezing Rain\"\r\nexport const id520 = \"Light Rain\"\r\nexport const id521 = \"Rain\"\r\nexport const id522 = \"Heavy Rain\"\r\nexport const id531 = \"Rain\"\r\n\r\nexport const id600 = \"Light Snow\"\r\nexport const id601 = \"Snow\"\r\nexport const id602 = \"Heavy Snow\"\r\nexport const id611 = \"Sleet\"\r\nexport const id612 = \"Heavy Sleet\"\r\nexport const id615 = \"Light Rain and Snow\"\r\nexport const id616 = \"Rain and Snow\"\r\nexport const id620 = \"Light Snow\"\r\nexport const id621 = \"Snow\"\r\nexport const id622 = \"Heavy Snow\"\r\n\r\nexport const id701 = \"Mist\"\r\nexport const id711 = \"Smoke\"\r\nexport const id721 = \"Haze\"\r\nexport const id731 = \"Sand\"\r\nexport const id741 = \"Fog\"\r\nexport const id751 = \"Sand\"\r\nexport const id761 = \"Dust\"\r\nexport const id762 = \"Volcanic Ash\"\r\nexport const id771 = \"Squalls\"\r\nexport const id781 = \"Tornado\"\r\n\r\nexport const id800 = \"Clear Sky\"\r\n\r\nexport const id801 = \"Few Clouds\"\r\nexport const id802 = \"Scattered Clouds\"\r\nexport const id803 = \"Broken Clouds\"\r\nexport const id804 = \"Overcast\"","import React from 'react'\r\n\r\nimport * as WeatherIds from './Resources/WeatherConstants'\r\nimport BrokenClouds from './Resources/brokenClouds.svg'\r\nimport ClearSky from './Resources/clearSky.svg'\r\nimport FewClouds from './Resources/fewClouds.svg'\r\nimport Fog from './Resources/fog.svg'\r\nimport HeavyRain from './Resources/heavyRain.svg'\r\nimport Rain from './Resources/rain.svg'\r\nimport ScatteredClouds from './Resources/scatteredClouds.svg'\r\nimport Snow from './Resources/snow.svg'\r\nimport ThunderStorm from './Resources/thunderStorm.svg'\r\n\r\nfunction WeatherView(props) {\r\n    var description = props.currentWeather.weatherId !== null ? WeatherIds[\"id\" + props.currentWeather.weatherId] : \"\"\r\n\r\n    let icon = null;\r\n    if (props.currentWeather.weatherId !== null){\r\n        switch (props.currentWeather.weatherId.toString()[0]) {\r\n            case \"2\":\r\n                icon = ThunderStorm\r\n                break;\r\n            case \"3\":\r\n                icon = Rain\r\n                break;\r\n            case \"5\":\r\n                icon = HeavyRain\r\n                break;\r\n            case \"6\":\r\n                icon = Snow\r\n                break;\r\n            case \"7\":\r\n                icon = Fog\r\n                break;\r\n            case \"8\":\r\n                switch (props.currentWeather.weatherId) {\r\n                    case 800:\r\n                        icon = ClearSky\r\n                        break;\r\n                    case 801:\r\n                        icon = FewClouds\r\n                        break;\r\n                    case 802:\r\n                        icon = ScatteredClouds\r\n                        break;\r\n                    case 803:\r\n                    case 804:\r\n                        icon = BrokenClouds\r\n                        break;\r\n                    default:\r\n                        icon = null;\r\n                }\r\n                break;\r\n            default:\r\n                icon = null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather-current-primary\">    \r\n                <div className=\"flex-item\">\r\n                        {Math.round(props.currentWeather.temp * 10 ) / 10 + \"\\xB0C\"}\r\n                    <img src={icon} className=\"weather-primary-icon\" alt=\"logo\" />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"weather-current-secondary\">\r\n                <div className=\"flex\">\r\n                    {\"Sunrise: \" + new Date(props.currentWeather.sunriseTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunset: \" + new Date(props.currentWeather.sunsetTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherView","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport WeatherView from './WeatherView'\r\n\r\nclass WeatherController extends React.Component {\r\n    constructor() {\r\n        super()\r\n    \r\n        var currentWeather = {\r\n            weatherId: null,\r\n            temp: null,\r\n            wind: null,\r\n            sunriseTime: null,\r\n            sunsetTime: null,\r\n        }\r\n\r\n        this.state = {\r\n            currentWeather: currentWeather,\r\n        }\r\n    \r\n        this.getMyLocation = this.getMyLocation.bind(this)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getMyLocation()\r\n    }\r\n    \r\n    getMyLocation() {\r\n        const location = window.navigator && window.navigator.geolocation\r\n        \r\n        if (location) {\r\n            location.getCurrentPosition((position) => {\r\n                this.getWeatherData(position.coords.latitude, position.coords.longitude)\r\n            }, (error) => {\r\n            })\r\n        }\r\n    \r\n    }\r\n\r\n    // Bad practice to show API key but since it's a free acc it doesn't matter \r\n    async getWeatherData(latitude, longitude) {\r\n        axios\r\n            .get(\"http://api.openweathermap.org/data/2.5/weather?lat=\" + latitude +  \"&lon=\" + longitude + \"&units=metric&dt=UTC&APPID=3c948094ab0c37cefda77bff721b6f13\")\r\n            .then( \r\n                response => {\r\n\r\n                    var currentWeather = {\r\n                        weatherId: response.data.weather[0].id,\r\n                        temp: response.data.main.temp,\r\n                        wind: response.data.wind.speed,\r\n                        sunriseTime: response.data.sys.sunrise,\r\n                        sunsetTime: response.data.sys.sunset,\r\n                    }\r\n                    this.setState({\r\n                        currentWeather:  currentWeather,\r\n                    })\r\n                });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <WeatherView currentWeather={this.state.currentWeather}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherController","import React, { Component } from 'react';\n\nimport DateBar from './Widgets/DateBar'\nimport IconBar from './Widgets/IconBar';\nimport SearchBar from './Widgets/SearchBar'\nimport Weather from './Widgets/Weather/WeatherController'\n\nimport './Styles/App.css';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"app-header\">\n                    <DateBar />\n                    <Weather />\n                </div>\n                <header className=\"app-content\">\n                    <SearchBar />\n                    <IconBar />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './Styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}