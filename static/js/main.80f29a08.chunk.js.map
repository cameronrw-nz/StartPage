{"version":3,"sources":["Icons/email.svg","Icons/github.svg","Icons/map.svg","Icons/reddit.svg","Icons/twitch.svg","Icons/youtube.svg","Widgets/Search/Resources/GoogleIcon.svg","Widgets/Search/Resources/RedditIcon.svg","Widgets/Search/Resources/YoutubeIcon.svg","Widgets/Weather/Resources/brokenClouds.svg","Widgets/Weather/Resources/clearSky.svg","Widgets/Weather/Resources/fewClouds.svg","Widgets/Weather/Resources/fog.svg","Widgets/Weather/Resources/heavyRain.svg","Widgets/Weather/Resources/rain.svg","Widgets/Weather/Resources/scatteredClouds.svg","Widgets/Weather/Resources/snow.svg","Widgets/Weather/Resources/thunderStorm.svg","Widgets/DateBar.js","Widgets/IconBar.js","Widgets/Search/SearchBar.js","Widgets/Weather/WeatherView.js","Widgets/Weather/WeatherController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateBlock","_ref","timeZone","time","date","react_default","a","createElement","Fragment","className","DateBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dateTime","Date","_this2","interval","setInterval","setState","clearInterval","localDate","toLocaleString","weekday","year","month","day","localTime","toLocaleTimeString","nzTime","moment","toString","tz","format","nzDate","React","Component","Icon","href","url","src","logo","alt","IconBar","EmailLogo","GitHubLogo","GoogleMaps","RedditLogo","TwitchLogo","YoutubeLogo","SearchBar","currentProviderIndex","handleProviderChange","bind","assertThisInitialized","handleClick","event","maxNoOfProviders","keyCode","providers","action","placeholder","icon","GoogleIcon","YoutubeIcon","RedditIcon","onClick","length","method","name","autoComplete","type","onKeyDown","WeatherView","currentWeather","weatherId","ThunderStorm","Rain","HeavyRain","Snow","Fog","ClearSky","FewClouds","ScatteredClouds","BrokenClouds","Math","round","temp","sunriseTime","sunsetTime","WeatherController","getMyLocation","location","window","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","error","axios","get","then","response","data","weather","id","main","wind","speed","sys","sunrise","sunset","_this3","Weather_WeatherView","App","Widgets_DateBar","Weather_WeatherController","Search_SearchBar","Widgets_IconBar","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80f29a08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.4082623a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.5b316389.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.45bc9386.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitch.3974a3ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.198b0452.svg\";","module.exports = __webpack_public_path__ + \"static/media/GoogleIcon.b5908130.svg\";","module.exports = __webpack_public_path__ + \"static/media/RedditIcon.a0b0f5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/YoutubeIcon.a7c57edd.svg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.f857faf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.922f1f6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.b0cf30aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.ca88433d.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavyRain.531d27ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9a09d698.svg\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.844c1a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b2c0182b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderStorm.0fff53ee.svg\";","import React from 'react'\r\nimport moment from 'moment-timezone'\r\n\r\nclass DateBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dateTime: new Date(),\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState({ \r\n            dateTime: new Date(),\r\n         }), 1000);\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n    render() {\r\n        var localDate = this.state.dateTime.toLocaleString('en-GB', {weekday: 'short', year: 'numeric', month: 'long', day: 'numeric'});\r\n        var localTime = this.state.dateTime.toLocaleTimeString('it-IT');\r\n        var nzTime = moment(this.state.dateTime.toString()).tz('NZ').format('hh:mm:ss');\r\n        var nzDate = moment(this.state.dateTime.toString()).tz('NZ').format('ddd, D MMMM YYYY');\r\n\r\n        return (\r\n            <div className=\"date-block\">\r\n                <DateBlock timeZone=\"Bangkok, Thailand\" time={localTime} date={localDate} />\r\n                <DateBlock timeZone=\"Christchurch, New Zealand\" time={nzTime} date={nzDate} />\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nfunction DateBlock({ timeZone, time, date }) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"date\">\r\n                <div className=\"date-time\">\r\n                    {time}\r\n                </div>\r\n                <div className=\"date-formatted\">\r\n                    {date}\r\n                </div>\r\n                <div className=\"date-formatted\">\r\n                    {timeZone}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DateBar","import React from 'react'\r\n\r\nimport EmailLogo from '../Icons/email.svg'\r\nimport GitHubLogo from '../Icons/github.svg'\r\nimport GoogleMaps from '../Icons/map.svg'\r\nimport RedditLogo from '../Icons/reddit.svg'\r\nimport TwitchLogo from '../Icons/twitch.svg'\r\nimport YoutubeLogo from '../Icons/youtube.svg'\r\n\r\nclass IconBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"icon-bar\">\r\n                <Icon url=\"https://outlook.live.com/mail/inbox\" logo={EmailLogo} />\r\n                <Icon url=\"https://github.com/cameronrw-nz\" logo={GitHubLogo} />\r\n                <Icon url=\"http://maps.google.com\" logo={GoogleMaps} />\r\n                <Icon url=\"https://reddit.com\" logo={RedditLogo} />\r\n                <Icon url=\"https://www.twitch.tv/directory\" logo={TwitchLogo} />\r\n                <Icon url=\"https://youtube.com\" logo={YoutubeLogo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Icon(props) {\r\n    return (\r\n        <a href={props.url}>\r\n            <img src={props.logo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default IconBar","import React from 'react'\r\n\r\nimport GoogleIcon from './Resources/GoogleIcon.svg'\r\nimport RedditIcon from './Resources/RedditIcon.svg'\r\nimport YoutubeIcon from './Resources/YoutubeIcon.svg'\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props) \r\n\r\n        this.state = {\r\n            currentProviderIndex: 0\r\n        }\r\n\r\n        this.handleProviderChange = this.handleProviderChange.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    handleProviderChange(event, maxNoOfProviders) {\r\n        var currentProviderIndex = this.state.currentProviderIndex;\r\n        if (event.keyCode === 38){\r\n            currentProviderIndex--;\r\n        }\r\n        else if (event.keyCode === 40) {\r\n            currentProviderIndex++;\r\n        }\r\n        \r\n        this.setState({\r\n            currentProviderIndex: (currentProviderIndex % maxNoOfProviders + maxNoOfProviders) % maxNoOfProviders \r\n        })\r\n    }\r\n\r\n    handleClick(maxNoOfProviders) {\r\n        var currentProviderIndex = this.state.currentProviderIndex;\r\n        currentProviderIndex++;\r\n        this.setState({\r\n            currentProviderIndex: (currentProviderIndex % maxNoOfProviders + maxNoOfProviders) % maxNoOfProviders \r\n        })\r\n    }\r\n\r\n    render() {\r\n        var providers = [\r\n            {\r\n                action: \"https://www.google.com/search\",\r\n                placeholder: \"Search Google\",\r\n                icon: GoogleIcon\r\n            },\r\n            {\r\n                action: \"https://www.youtube.com/results?search_query\",\r\n                placeholder: \"Search Youtube\",\r\n                icon: YoutubeIcon\r\n            },\r\n            {\r\n                action: \"https://www.reddit.com/search\",\r\n                placeholder: \"Search Reddit\",\r\n                icon: RedditIcon\r\n            }\r\n        ];\r\n\r\n        \r\n        return (\r\n            <div className=\"search-bar\">\r\n                <div className=\"search-bar-icon\" onClick={() => this.handleClick(providers.length)}>\r\n                    <img src={providers[this.state.currentProviderIndex].icon} alt=\"Switch Search Provider\" />\r\n                </div>\r\n                <form action={providers[this.state.currentProviderIndex].action} method=\"get\" name=\"searchform\">\r\n                    <input \r\n                        className=\"search-bar-search\" \r\n                        autoComplete=\"off\" \r\n                        type=\"text\" \r\n                        name=\"q\" \r\n                        placeholder={providers[this.state.currentProviderIndex].placeholder}\r\n                        onKeyDown={(event) => this.handleProviderChange(event, providers.length)}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react'\r\n\r\nimport BrokenClouds from './Resources/brokenClouds.svg'\r\nimport ClearSky from './Resources/clearSky.svg'\r\nimport FewClouds from './Resources/fewClouds.svg'\r\nimport Fog from './Resources/fog.svg'\r\nimport HeavyRain from './Resources/heavyRain.svg'\r\nimport Rain from './Resources/rain.svg'\r\nimport ScatteredClouds from './Resources/scatteredClouds.svg'\r\nimport Snow from './Resources/snow.svg'\r\nimport ThunderStorm from './Resources/thunderStorm.svg'\r\n\r\nfunction WeatherView(props) {\r\n    let icon = null;\r\n    if (props.currentWeather.weatherId !== null){\r\n        switch (props.currentWeather.weatherId.toString()[0]) {\r\n            case \"2\":\r\n                icon = ThunderStorm\r\n                break;\r\n            case \"3\":\r\n                icon = Rain\r\n                break;\r\n            case \"5\":\r\n                icon = HeavyRain\r\n                break;\r\n            case \"6\":\r\n                icon = Snow\r\n                break;\r\n            case \"7\":\r\n                icon = Fog\r\n                break;\r\n            case \"8\":\r\n                switch (props.currentWeather.weatherId) {\r\n                    case 800:\r\n                        icon = ClearSky\r\n                        break;\r\n                    case 801:\r\n                        icon = FewClouds\r\n                        break;\r\n                    case 802:\r\n                        icon = ScatteredClouds\r\n                        break;\r\n                    case 803:\r\n                    case 804:\r\n                        icon = BrokenClouds\r\n                        break;\r\n                    default:\r\n                        icon = null;\r\n                }\r\n                break;\r\n            default:\r\n                icon = null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather-current-primary\">    \r\n                <div className=\"flex-item\">\r\n                        {Math.round(props.currentWeather.temp * 10 ) / 10 + \"\\xB0C\"}\r\n                    <img src={icon} className=\"weather-primary-icon\" alt=\"logo\" />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"weather-current-secondary\">\r\n                <div className=\"flex\">\r\n                    {\"Sunrise: \" + new Date(props.currentWeather.sunriseTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunset: \" + new Date(props.currentWeather.sunsetTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherView","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport WeatherView from './WeatherView'\r\n\r\nclass WeatherController extends React.Component {\r\n    constructor() {\r\n        super()\r\n    \r\n        this.state = {\r\n            currentWeather: null\r\n        }\r\n    \r\n        this.getMyLocation = this.getMyLocation.bind(this)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getMyLocation()\r\n    }\r\n    \r\n    getMyLocation() {\r\n        const location = window.navigator && window.navigator.geolocation\r\n        \r\n        if (location) {\r\n            location.getCurrentPosition((position) => {\r\n                this.getWeatherData(position.coords.latitude, position.coords.longitude)\r\n            }, (error) => {\r\n            })\r\n        }\r\n    \r\n    }\r\n\r\n    // Bad practice to show API key but since it's a free acc it doesn't matter \r\n    async getWeatherData(latitude, longitude) {\r\n        axios\r\n            .get(\"http://api.openweathermap.org/data/2.5/weather?lat=\" + latitude +  \"&lon=\" + longitude + \"&units=metric&dt=UTC&APPID=3c948094ab0c37cefda77bff721b6f13\")\r\n            .then( \r\n                response => {\r\n\r\n                    var currentWeather = {\r\n                        weatherId: response.data.weather[0].id,\r\n                        temp: response.data.main.temp,\r\n                        wind: response.data.wind.speed,\r\n                        sunriseTime: response.data.sys.sunrise,\r\n                        sunsetTime: response.data.sys.sunset,\r\n                    }\r\n                    this.setState({\r\n                        currentWeather:  currentWeather,\r\n                    })\r\n                });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.currentWeather === null ? <div /> : (<WeatherView currentWeather={this.state.currentWeather}/>)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherController","import React, { Component } from 'react';\r\n\r\nimport DateBar from './Widgets/DateBar'\r\nimport IconBar from './Widgets/IconBar';\r\nimport SearchBar from './Widgets/Search/SearchBar'\r\nimport Weather from './Widgets/Weather/WeatherController'\r\n\r\nimport './Styles/App.css';\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"app-header\">\r\n                    <DateBar />\r\n                    <Weather />\r\n                </div>\r\n                <header className=\"app-content\">\r\n                    <SearchBar />\r\n                    <IconBar />\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './Styles/index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}