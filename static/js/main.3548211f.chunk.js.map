{"version":3,"sources":["Icons/email.svg","Icons/github.svg","Icons/map.svg","Icons/reddit.svg","Icons/twitch.svg","Icons/youtube.svg","Widgets/Search/Resources/GoogleIcon.svg","Widgets/Search/Resources/RedditIcon.svg","Widgets/Search/Resources/YoutubeIcon.svg","Widgets/Weather/Resources/brokenClouds.svg","Widgets/Weather/Resources/clearSky.svg","Widgets/Weather/Resources/fewClouds.svg","Widgets/Weather/Resources/fog.svg","Widgets/Weather/Resources/heavyRain.svg","Widgets/Weather/Resources/rain.svg","Widgets/Weather/Resources/scatteredClouds.svg","Widgets/Weather/Resources/snow.svg","Widgets/Weather/Resources/thunderStorm.svg","Widgets/DateBar.js","Widgets/IconBar.js","Widgets/Search/SearchBar.js","Widgets/Weather/WeatherView.js","Widgets/Weather/WeatherController.js","Api/Api.js","Widgets/CurrencyConversion.js","Widgets/RedditView.js","Widgets/RedditController.js","Widgets/Links.js","Panels.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateBlock","_ref","timeZone","time","date","react_default","a","createElement","Fragment","className","DateBar","_useState","useState","Date","_useState2","Object","slicedToArray","dateTime","setDateTime","intervalRef","useRef","useEffect","current","setInterval","clearInterval","localDate","toLocaleString","weekday","year","month","day","localTime","toLocaleTimeString","nzTime","moment","toString","tz","format","nzDate","Icon","props","href","url","src","logo","alt","IconBar","EmailLogo","GitHubLogo","GoogleMaps","RedditLogo","TwitchLogo","YoutubeLogo","SearchBar","currentProviderIndex","setProviderIndex","providers","action","placeholder","icon","GoogleIcon","YoutubeIcon","RedditIcon","method","name","onClick","maxNoOfProviders","currentIndex","handleClick","length","autoComplete","type","onKeyDown","event","keyCode","handleProviderChange","formatTemperature","temp","Math","round","WeatherView","currentWeather","weatherId","ThunderStorm","Rain","HeavyRain","Snow","Fog","ClearSky","FewClouds","ScatteredClouds","BrokenClouds","style","fontSize","tempMin","tempMax","sunriseTime","sunsetTime","WeatherController","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getMyLocation","bind","assertThisInitialized","_this2","location","window","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","error","axios","get","then","response","data","weather","id","main","temp_max","temp_min","wind","speed","sys","sunrise","sunset","_this3","setState","Weather_WeatherView","React","Component","_callee","regenerator_default","wrap","_context","prev","next","abrupt","stop","CurrencyConversion","thb","setThb","_useState3","_useState4","nzd","setNzd","_useState5","_useState6","nzdToThb","setNzdToThb","_getCurrencyConversion","apply","arguments","Api","NZD_THB","val","parseFloat","toFixed","console","log","concat","value","onInput","e","target","RedditView","content","redditContent","isLoggedIn","map","item","link","colour","backgroundColor","isLoading","pickRandom","onSubmit","errorMessage","webColour","allowedSubreddits","Map","set","RedditController","getSavedItems","asyncToGenerator","mark","username","password","r","hasError","me","saved","savedCategories","items","snoowrap","userAgent","clientId","process","clientSecret","getMe","catch","sent","getSavedContent","forEach","element","categoryColour","subreddit_name_prefixed","push","title","permalink","fetchMore","skipReplies","amount","_x","_x2","preventDefault","undefined","randomItemIndex","floor","random","slice","randomSavedItems","Widgets_RedditView","Link","isEnteringLink","setIsLinking","links","setLinks","currentLink","setCurrentLink","_useState7","_useState8","currentName","setCurrentName","JSON","parse","localStorage","getItem","linksDisplay","index","addLinkContent","newLinks","setItem","stringify","localStorageLinks","onChange","display","flexDirection","Panels","Widgets_RedditController","Widgets_CurrencyConversion","Links","App","Weather_WeatherController","Widgets_DateBar","Widgets_IconBar","Search_SearchBar","src_Panels","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3548211f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.4082623a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.5b316389.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.45bc9386.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitch.3974a3ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.198b0452.svg\";","module.exports = __webpack_public_path__ + \"static/media/GoogleIcon.b5908130.svg\";","module.exports = __webpack_public_path__ + \"static/media/RedditIcon.a0b0f5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/YoutubeIcon.a7c57edd.svg\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.f857faf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.922f1f6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.b0cf30aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.ca88433d.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavyRain.531d27ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9a09d698.svg\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.844c1a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b2c0182b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderStorm.0fff53ee.svg\";","import React, { useState, useEffect, useRef } from 'react'\r\nimport moment from 'moment-timezone'\r\n\r\nfunction DateBar() {\r\n    const [dateTime, setDateTime] = useState(new Date());\r\n    const intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        intervalRef.current = setInterval(() => setDateTime(new Date()), 1000);\r\n\r\n         return function cleanup() {\r\n             clearInterval(intervalRef.current);\r\n         }\r\n    });\r\n\r\n    var localDate = dateTime.toLocaleString('th-TH', {weekday: 'short', year: 'numeric', month: 'long', day: 'numeric'});\r\n    var localTime = dateTime.toLocaleTimeString('it-IT');\r\n    var nzTime = moment(dateTime.toString()).tz('NZ').format('HH:mm:ss');\r\n    var nzDate = moment(dateTime.toString()).tz('NZ').format('ddd, D MMMM YYYY');\r\n\r\n    return (\r\n        <div className=\"date-block\">\r\n            <DateBlock timeZone=\"Bangkok, Thailand\" time={localTime} date={localDate} />\r\n            <DateBlock timeZone=\"Christchurch, New Zealand\" time={nzTime} date={nzDate} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DateBlock({ timeZone, time, date }) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"date\">\r\n                <div className=\"date-time\">\r\n                    {time}\r\n                </div>\r\n                <div className=\"date-formatted\">\r\n                    {date}\r\n                </div>\r\n                <div className=\"date-formatted\">\r\n                    {timeZone}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DateBar","import React from 'react'\r\n\r\nimport EmailLogo from '../Icons/email.svg'\r\nimport GitHubLogo from '../Icons/github.svg'\r\nimport GoogleMaps from '../Icons/map.svg'\r\nimport RedditLogo from '../Icons/reddit.svg'\r\nimport TwitchLogo from '../Icons/twitch.svg'\r\nimport YoutubeLogo from '../Icons/youtube.svg'\r\n\r\nfunction IconBar() {\r\n    return (\r\n        <div className=\"icon-bar\">\r\n            <Icon url=\"https://outlook.live.com/mail/inbox\" logo={EmailLogo} />\r\n            <Icon url=\"https://github.com/cameronrw-nz\" logo={GitHubLogo} />\r\n            <Icon url=\"http://maps.google.com\" logo={GoogleMaps} />\r\n            <Icon url=\"https://reddit.com\" logo={RedditLogo} />\r\n            <Icon url=\"https://www.twitch.tv/directory\" logo={TwitchLogo} />\r\n            <Icon url=\"https://youtube.com\" logo={YoutubeLogo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Icon(props) {\r\n    return (\r\n        <a href={props.url}>\r\n            <img src={props.logo} className=\"icon-bar-icon\" alt=\"logo\" />\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default IconBar","import React, { useState } from \"react\";\r\n\r\nimport GoogleIcon from \"./Resources/GoogleIcon.svg\";\r\nimport RedditIcon from \"./Resources/RedditIcon.svg\";\r\nimport YoutubeIcon from \"./Resources/YoutubeIcon.svg\";\r\n\r\nfunction SearchBar() {\r\n    const [currentProviderIndex, setProviderIndex] = useState(0);\r\n\r\n    function handleProviderChange(event, maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        if (event.keyCode === 38) {\r\n            currentIndex--;\r\n        } else if (event.keyCode === 40) {\r\n            currentIndex++;\r\n        }\r\n\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    function handleClick(maxNoOfProviders) {\r\n        var currentIndex = currentProviderIndex;\r\n        currentIndex++;\r\n        setProviderIndex(\r\n            ((currentIndex % maxNoOfProviders) + maxNoOfProviders) %\r\n                maxNoOfProviders\r\n        );\r\n    }\r\n\r\n    var providers = [\r\n        {\r\n            action: \"https://www.google.com/search\",\r\n            placeholder: \"Search Google\",\r\n            icon: GoogleIcon\r\n        },\r\n        {\r\n            action: \"https://www.youtube.com/results?search_query\",\r\n            placeholder: \"Search Youtube\",\r\n            icon: YoutubeIcon\r\n        },\r\n        {\r\n            action: \"https://www.reddit.com/search\",\r\n            placeholder: \"Search Reddit\",\r\n            icon: RedditIcon\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <form\r\n            action={providers[currentProviderIndex].action}\r\n            method=\"get\"\r\n            name=\"searchform\"\r\n        >\r\n            <div className=\"search-bar\">\r\n                <div\r\n                    className=\"search-bar-icon\"\r\n                    onClick={() => handleClick(providers.length)}\r\n                >\r\n                    <img\r\n                        src={providers[currentProviderIndex].icon}\r\n                        alt=\"Switch Search Provider\"\r\n                    />\r\n                </div>\r\n                <input\r\n                    className=\"search-bar-search\"\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    name=\"q\"\r\n                    placeholder={providers[currentProviderIndex].placeholder}\r\n                    onKeyDown={event =>\r\n                        handleProviderChange(event, providers.length)\r\n                    }\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react'\r\n\r\nimport BrokenClouds from './Resources/brokenClouds.svg'\r\nimport ClearSky from './Resources/clearSky.svg'\r\nimport FewClouds from './Resources/fewClouds.svg'\r\nimport Fog from './Resources/fog.svg'\r\nimport HeavyRain from './Resources/heavyRain.svg'\r\nimport Rain from './Resources/rain.svg'\r\nimport ScatteredClouds from './Resources/scatteredClouds.svg'\r\nimport Snow from './Resources/snow.svg'\r\nimport ThunderStorm from './Resources/thunderStorm.svg'\r\n\r\nfunction WeatherView(props) {\r\n    let icon = null;\r\n    if (props.currentWeather.weatherId !== null){\r\n        switch (props.currentWeather.weatherId.toString()[0]) {\r\n            case \"2\": icon = ThunderStorm; break;\r\n            case \"3\": icon = Rain; break;\r\n            case \"5\": icon = HeavyRain; break;\r\n            case \"6\": icon = Snow; break;\r\n            case \"7\": icon = Fog; break;\r\n            case \"8\":\r\n                switch (props.currentWeather.weatherId) {\r\n                    case 800: icon = ClearSky; break;\r\n                    case 801: icon = FewClouds; break;\r\n                    case 802: icon = ScatteredClouds; break;\r\n                    case 803:\r\n                    case 804: icon = BrokenClouds; break;\r\n                    default: icon = null;\r\n                }\r\n                break;\r\n            default: icon = null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather-current-primary\">    \r\n                <div className=\"flex-item\">\r\n                    {formatTemperature(props.currentWeather.temp)}\r\n                    <img src={icon} className=\"weather-primary-icon\" alt=\"logo\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"weather-current-secondary\">\r\n                <div className=\"flex\" style={{fontSize: \"16px\"}}>\r\n                    {formatTemperature(props.currentWeather.tempMin) + \" - \" + formatTemperature(props.currentWeather.tempMax)}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunrise: \" + new Date(props.currentWeather.sunriseTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n                <div className=\"flex\">\r\n                    {\"Sunset: \" + new Date(props.currentWeather.sunsetTime*1000).toLocaleTimeString('it-IT')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction formatTemperature(temp) {\r\n    return (\r\n        Math.round(temp * 10 ) / 10 + \"\\xB0C\"\r\n    )\r\n}\r\n\r\nexport default WeatherView","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport WeatherView from './WeatherView'\r\n\r\nclass WeatherController extends React.Component {\r\n    constructor() {\r\n        super()\r\n    \r\n        this.state = {\r\n            currentWeather: null\r\n        }\r\n    \r\n        this.getMyLocation = this.getMyLocation.bind(this)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getMyLocation()\r\n    }\r\n    \r\n    getMyLocation() {\r\n        const location = window.navigator && window.navigator.geolocation\r\n        \r\n        if (location) {\r\n            location.getCurrentPosition((position) => {\r\n                this.getWeatherData(position.coords.latitude, position.coords.longitude)\r\n            }, (error) => {\r\n            })\r\n        }\r\n    \r\n    }\r\n\r\n    // Bad practice to show API key but since it's a free acc it doesn't matter \r\n    async getWeatherData(latitude, longitude) {\r\n        axios\r\n            .get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude +  \"&lon=\" + longitude + \"&units=metric&dt=UTC&APPID=\" + process.env.REACT_APP_WEATHER_APIKEY)\r\n            .then( \r\n                response => {\r\n\r\n                    var currentWeather = {\r\n                        weatherId: response.data.weather[0].id,\r\n                        temp: response.data.main.temp,\r\n                        tempMax: response.data.main.temp_max,\r\n                        tempMin: response.data.main.temp_min,\r\n                        wind: response.data.wind.speed,\r\n                        sunriseTime: response.data.sys.sunrise,\r\n                        sunsetTime: response.data.sys.sunset,\r\n                    }\r\n                    this.setState({\r\n                        currentWeather:  currentWeather,\r\n                    })\r\n                });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.currentWeather === null ? <div /> : (<WeatherView currentWeather={this.state.currentWeather}/>)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherController","import axios from \"axios\";\r\n\r\nexport async function getCurrencyConversion() {\r\n    return axios\r\n        .get(\"https://free.currencyconverterapi.com/api/v6/convert?q=NZD_THB&compact=y&apiKey=\" + process.env.REACT_APP_CURRENCY_APIKEY)\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as Api from \"../Api/Api\";\r\n\r\nfunction CurrencyConversion() {\r\n    const [thb, setThb] = useState(1);\r\n    const [nzd, setNzd] = useState(1);\r\n    const [nzdToThb, setNzdToThb] = useState(1);\r\n\r\n    useEffect(() => {\r\n        Api.getCurrencyConversion().then(response => {\r\n            if (!response || !response.data || !response.data.NZD_THB) {\r\n                return;\r\n            }\r\n            setNzdToThb(response.data.NZD_THB.val);\r\n            setThb((parseFloat(nzd) * response.data.NZD_THB.val).toFixed(2));\r\n        });\r\n    });\r\n\r\n    function onNZDChanged(e) {\r\n        setNzd(e.target.value);\r\n        setThb((parseFloat(e.target.value) * nzdToThb).toFixed(2));\r\n    }\r\n\r\n    function onTHBChanged(e) {\r\n        setNzd((parseFloat(e.target.value) / nzdToThb).toFixed(2));\r\n        setThb(e.target.value);\r\n    }\r\n    console.log(`NZD: ${nzd}, THB: ${thb}`);\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2>Currency Converter</h2>\r\n            <div className=\"sidepanel-link-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"THB\"\r\n                    name=\"thb\"\r\n                    value={thb}\r\n                    onInput={onTHBChanged}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"NZD\"\r\n                    name=\"nzd\"\r\n                    value={nzd}\r\n                    onInput={onNZDChanged}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrencyConversion;\r\n","import React from \"react\";\r\n\r\nfunction RedditView(props) {\r\n    let content;\r\n    let redditContent;\r\n\r\n    if (props.isLoggedIn) {\r\n        if (props.content) {\r\n            redditContent = props.content.map(item => {\r\n                return GetRedditItem(item.name, item.link, item.colour);\r\n            });\r\n        }\r\n\r\n        content = props.isLoading ? (\r\n            <div>Loading...</div>\r\n        ) : (\r\n            <div className=\"action-button\" onClick={props.pickRandom}>\r\n                <div className=\"action-button-content\">Refresh</div>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <form onSubmit={props.onSubmit}>\r\n                <div className=\"sidepanel-link-input\">\r\n                    <input type=\"text\" name=\"username\" placeholder=\"username\" />\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                    />\r\n                    <button type=\"submit\" className=\"sidepanel-content-button\">\r\n                        +\r\n                    </button>\r\n                </div>\r\n                <div>{props.errorMessage}</div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2>Reddit Saved</h2>\r\n            {redditContent}\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GetRedditItem(name, link, colour) {\r\n    return (\r\n        <a href={`https://reddit.com/${link}`}>\r\n            <div className=\"section-item\" style={{ backgroundColor: colour }}>\r\n                {name}\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default RedditView;\r\n","import React from \"react\";\r\nimport snoowrap from \"snoowrap\";\r\n\r\nimport RedditView from \"./RedditView\";\r\n\r\nconst webColour = \"rgb(64.4%, 29.1%, 29.1%)\";\r\nconst dotnetColour = \"rgb(34.6%, 39.5%, 64.8%)\";\r\nconst generalColour = \"rgb(30.6%, 60.9%, 35.9%)\";\r\nconst allowedSubreddits = new Map();\r\nallowedSubreddits.set(\"r/reactjs\", webColour);\r\nallowedSubreddits.set(\"r/programming\", generalColour);\r\nallowedSubreddits.set(\"r/webdev\", webColour);\r\nallowedSubreddits.set(\"r/learnprogramming\", generalColour);\r\nallowedSubreddits.set(\"r/csharp\", dotnetColour);\r\nallowedSubreddits.set(\"r/web_design\", webColour);\r\nallowedSubreddits.set(\"r/javascript\", webColour);\r\n\r\nclass RedditController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            savedCategories: undefined\r\n        };\r\n\r\n        this.pickRandom = this.pickRandom.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (\r\n            process.env.REACT_APP_REDDIT_USERNAME === \"\" ||\r\n            process.env.REACT_APP_REDDIT_PASSWORD === \"\"\r\n        ) {\r\n            return;\r\n        } else {\r\n            await this.getSavedItems(\r\n                process.env.REACT_APP_REDDIT_USERNAME,\r\n                process.env.REACT_APP_REDDIT_PASSWORD\r\n            );\r\n        }\r\n    }\r\n\r\n    getSavedItems = async (username, password) => {\r\n        // Replace with actual connection to reddit.\r\n        const r = new snoowrap({\r\n            userAgent: \"Saved Info/0.1 by Darzolak\",\r\n            clientId: process.env.REACT_APP_REDDIT_CLIENTID,\r\n            clientSecret: process.env.REACT_APP_REDDIT_CLIENTSECRET,\r\n            username: username,\r\n            password: password\r\n        });\r\n\r\n        var hasError = false;\r\n        var me = await r.getMe().catch(e => (hasError = true));\r\n\r\n        if (hasError) {\r\n            this.setState({\r\n                isLoggedIn: false,\r\n                errorMessage: \"Username or Password was incorrect.\"\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({ isLoggedIn: true });\r\n        }\r\n        var saved = await me.getSavedContent();\r\n\r\n        var savedCategories = new Map();\r\n        var items = [];\r\n        saved.forEach(element => {\r\n            const categoryColour = allowedSubreddits.get(\r\n                element.subreddit_name_prefixed\r\n            );\r\n            if (categoryColour) {\r\n                items.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n                if (!savedCategories.get(element.subreddit_name_prefixed)) {\r\n                    savedCategories.set(element.subreddit_name_prefixed, [\r\n                        { name: element.title, permalink: element.permalink }\r\n                    ]);\r\n                } else {\r\n                    savedCategories.get(element.subreddit_name_prefixed).push({\r\n                        name: element.title,\r\n                        permalink: element.permalink\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({ items });\r\n        this.pickRandom();\r\n\r\n        // Fetch More\r\n        saved = await saved.fetchMore({\r\n            skipReplies: true,\r\n            amount: 100\r\n        });\r\n\r\n        savedCategories = new Map();\r\n        items = [];\r\n        saved.forEach(element => {\r\n            const categoryColour = allowedSubreddits.get(\r\n                element.subreddit_name_prefixed\r\n            );\r\n            if (categoryColour) {\r\n                items.push({\r\n                    name: element.title,\r\n                    link: element.permalink,\r\n                    colour: categoryColour\r\n                });\r\n                if (!savedCategories.get(element.subreddit_name_prefixed)) {\r\n                    savedCategories.set(element.subreddit_name_prefixed, [\r\n                        { name: element.title, permalink: element.permalink }\r\n                    ]);\r\n                } else {\r\n                    savedCategories.get(element.subreddit_name_prefixed).push({\r\n                        name: element.title,\r\n                        permalink: element.permalink\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        this.setState({ items });\r\n        return true;\r\n    };\r\n\r\n    pickRandom() {\r\n        if (!this.state.items) {\r\n            return;\r\n        }\r\n\r\n        const randomItemIndex = Math.floor(\r\n            Math.random() * (this.state.items.length - 7)\r\n        );\r\n        var items = this.state.items.slice(\r\n            randomItemIndex,\r\n            randomItemIndex + 7\r\n        );\r\n        this.setState({ randomSavedItems: items });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const username = e.target[0].value;\r\n        const password = e.target[1].value;\r\n\r\n        if (username && password) {\r\n            this.getSavedItems(username, password);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RedditView\r\n                content={this.state.randomSavedItems}\r\n                error={this.state.error}\r\n                isLoading={this.state.items === undefined}\r\n                pickRandom={this.pickRandom}\r\n                isLoggedIn={this.state.isLoggedIn}\r\n                onSubmit={this.onSubmit}\r\n                errorMessage={this.state.errorMessage}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RedditController;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Link(props) {\r\n    const [isEnteringLink, setIsLinking] = useState(false);\r\n    const [links, setLinks] = useState([]);\r\n    const [currentLink, setCurrentLink] = useState(\"\");\r\n    const [currentName, setCurrentName] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setLinks(JSON.parse(window.localStorage.getItem(\"links\")));\r\n        console.log(\"loading\");\r\n    }, []);\r\n\r\n    const handleIsEnteringLink = () => {};\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        let newLinks = links;\r\n        if (!newLinks) {\r\n            newLinks = [];\r\n        }\r\n\r\n        newLinks.push({\r\n            link: currentLink,\r\n            name: currentName\r\n        });\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(newLinks));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n        setCurrentLink(\"\");\r\n        setCurrentName(\"\");\r\n        setIsLinking(false);\r\n    };\r\n\r\n    const removeLink = index => {\r\n        if (!links) {\r\n            links = [];\r\n        }\r\n\r\n        links.splice(index, 1);\r\n\r\n        localStorage.setItem(\"links\", JSON.stringify(links));\r\n        var localStorageLinks = JSON.parse(\r\n            window.localStorage.getItem(\"links\")\r\n        );\r\n\r\n        setLinks(localStorageLinks);\r\n    };\r\n\r\n    const linksDisplay = links\r\n        ? links.map((element, index) => {\r\n              return (\r\n                  <a href={element.link}>\r\n                      <div className=\"section-item\">{element.name}</div>\r\n                  </a>\r\n              );\r\n          })\r\n        : undefined;\r\n\r\n    const addLinkContent = isEnteringLink ? (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"sidepanel-link-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    value={currentName}\r\n                    onChange={e => setCurrentName(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Link\"\r\n                    value={currentLink}\r\n                    onChange={e => setCurrentLink(e.target.value)}\r\n                />\r\n                <button type=\"submit\" className=\"sidepanel-content-button\">\r\n                    +\r\n                </button>\r\n            </div>\r\n        </form>\r\n    ) : (\r\n        <div className=\"action-button\" onClick={() => setIsLinking(true)}>\r\n            <div className=\"action-button-content\">Add</div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"sidepanel-content\">\r\n            <h2>Links</h2>\r\n            {linksDisplay}\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }} />\r\n            {addLinkContent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Link;\r\n","import React from \"react\";\r\nimport CurrencyConversion from \"./Widgets/CurrencyConversion\";\r\nimport RedditController from \"./Widgets/RedditController\";\r\nimport Link from \"./Widgets/Links\";\r\n\r\nfunction Panels() {\r\n    return (\r\n        <div className=\"panels\">\r\n            <RedditController />\r\n            <CurrencyConversion />\r\n            <Link />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panels;\r\n","import React from \"react\";\r\n\r\nimport DateBar from \"./Widgets/DateBar\";\r\nimport IconBar from \"./Widgets/IconBar\";\r\nimport SearchBar from \"./Widgets/Search/SearchBar\";\r\nimport Weather from \"./Widgets/Weather/WeatherController\";\r\n\r\nimport \"./Styles/App.css\";\r\nimport Panels from \"./Panels\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app-header\">\r\n                <Weather />\r\n                <DateBar />\r\n            </div>\r\n            <header className=\"app-content\">\r\n                <IconBar />\r\n                <SearchBar />\r\n                <Panels />\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./Styles/index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}